[{"body":" ","excerpt":" ","language":"content/en","ref":"/reference/cheatsheet/","title":"Cheat Sheet"},{"body":" ","excerpt":" ","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/cheat-sheet/","title":"Cheat Sheet"},{"body":" What is Oscar? Ritchie is an open source framework that allows you to create, store and share any kind of automations, executing them through command lines, to run operations or start workflows.\n  Versioning Currently, Ritchie has two available versions. On this documentation, we’ll focus on Ritchie version 2.0.\n For more information on how to install the CLI, check out the Getting Started section. For more information about Release Notes and Ritchie versions, check out the Reference section.  How does Ritchie work? In Ritchie’s context, everything works through formulas. This means that a formula is a script that can be automatically executed or interactively through a command line.\nWhen you adapt an existing script to Ritchie’s structure, it allows you to run it locally or through Docker, and to share it on Bitbucket, Github, or Gitlab repository.\n","excerpt":" What is Oscar? Ritchie is an open source framework that allows you to …","language":"content/en","ref":"/overview/","title":"Overview"},{"body":" O que é o Ritchie? O Ritchie é um framework open source que permite criar, armazenar e compartilhar qualquer tipo de automação, executando-as por meio de linha de comando, para executar operações ou iniciar fluxos de trabalho.\n  Versionamento Atualmente, o Ritchie possui duas versões disponíveis para ser usada. Nesta documentação, o foco será no Ritchie versão 2.0.\n Para mais informações sobre a Instalação do CLI(http://docs.devritchiecli.io/pt-br/primeiros-passos/), veja a seção de Primeiros Passos. Para mais informações sobre Release Notes e versões do Ritchie, veja a seção de Referência.  Como funciona? No contexto do Ritchie, tudo funciona por meio de fórmulas!\nNa prática, uma fórmula é um script que pode ser executado automaticamente ou interativamente por meio de uma linha de comando.\nQuando você adapta um script existente à estrutura do Ritchie, isso permite executá-lo localmente ou por meio do Docker e compartilhá-lo em um repositório do Bitbucket, Github ou Gitlab.\n","excerpt":" O que é o Ritchie? O Ritchie é um framework open source que permite …","language":"content/pt-br","ref":"/pt-br/vis%C3%A3o-geral/","title":"Visão geral"},{"body":" Esse guia rápido é para você já começar usando Ritchie, siga esses 3 passos:\n Instalação Inicialização Execução de uma fórmula teste  1. Instalação Primeiro, você deve instalar o Ritchie de acordo com o seu sistema operacional. Escolha a sua opção na seção Primeiros Passos.\n2. Inicialização Assim que finalizar a instalação do Ritchie, você precisa fazer a inicialização. Para isso, sigas as orientações na seção de Inicialização do CLI.\n3. Execução de uma fórmula teste Agora, rode um “hello-world” no Ritchie para confirmar se a instalação funcionou. Para isso, sigas as orientações na seção Executar uma fórmula hello world.\nParabéns, você está pronto para usar o Ritchie nos seus projetos!  ","excerpt":" Esse guia rápido é para você já começar usando Ritchie, siga esses 3 …","language":"content/pt-br","ref":"/pt-br/guia-de-come%C3%A7o-r%C3%A1pido/","title":"Guia de começo rápido"},{"body":" This quick start guide is to start using Ritchie, follow these 3 steps:\n Installation Initialization Running a test formula  1. Installation First you have to install Ritchie according to your operating system. Choose your option in the Getting Started section.\n2. Initialization After you finished Ritchie’s installation, you have to initialize it. To do that, check out the Initialize CLI section.\n3. Running a test formula Now, run a “hello-world” on Ritchie to confirm if your installation went well. To do that, follow the steps in the Hello world formula section.\nWell done, you’re ready to use Ritchie in your projects!  ","excerpt":" This quick start guide is to start using Ritchie, follow these 3 …","language":"content/en","ref":"/quick-start-guide/","title":"Quick start guide"},{"body":"","excerpt":"","language":"content/en","ref":"/","title":"Documentation"},{"body":"","excerpt":"","language":"content/pt-br","ref":"/pt-br/","title":"Documentação"},{"body":" Requirements (only for versions prior to 2.0.6)  The make command.  Step 1: Installing command Latest Version To install the latest version, run the command below in the terminal:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash  To install Ritchie on servers or Docker containers (without sudo user), use the following command:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | sed -e 's/sudo//g' | bash   If you prefer, you also can install using the manual installation..  Packages To download a specific package or version, just paste the URL on your browser replacing the {VERSION} field according to the repository’s project tags:\nRed Hat Package Manager https://commons-repo.ritchiecli.io/{VERSION}/installer/ritchie.rpm  To download version 2.12.0 use the following URL:\nhttps://commons-repo.ritchiecli.io/2.12.0/installer/ritchie.rpm   Debian https://commons-repo.ritchiecli.io/{VERSION}/installer/ritchie.deb  To download version 2.12.0 use the following URL:\nhttps://commons-repo.ritchiecli.io/2.12.0/installer/ritchie.deb   Arch Linux The tar.gz package is available on this Arch Linux user repository page (repository reference).\nStep 2: Verify installation Confirm if your installation went well by running this command:\nrit --version If everything’s configured, the terminal will return Ritchie’s current version.\n","excerpt":" Requirements (only for versions prior to 2.0.6)  The make command. …","language":"content/en","ref":"/getting-started/linux/","title":"CLI installation for Linux"},{"body":" Requisitos (somente para versões anteriores a 2.0.6)  O comando make.  Passo 1: Rode o comando de instalação Última versão Para instalar a ultima versão, execute no terminal o comando abaixo:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash  Para instalar o Ritchie em servidores ou contêineres Docker (sem o usuário sudo), use o seguinte comando:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | sed -e 's/sudo//g' | bash   Se preferir, você também pode instalar com a instalação manual.  Pacotes Se você quiser baixar uma versão ou um pacote específico, use as URLs abaixo no seu navegador. Substitua o campo {VERSION} de acordo com a tag do repositório do seu projeto:\nRed Hat Package Manager https://commons-repo.ritchiecli.io/{VERSION}/installer/ritchie.rpm  Para baixar a versão 2.12.0 use o seguinte URL:\nhttps://commons-repo.ritchiecli.io/2.10.0/installer/ritchie.rpm   Debian https://commons-repo.ritchiecli.io/{VERSION}/installer/ritchie.deb  Para baixar a versão 2.12.0 use o seguinte URL:\nhttps://commons-repo.ritchiecli.io/2.12.0/installer/ritchie.deb   Arch Linux O pacote tar.gz está disponível na página: Arch Linux user repository e veja o (repositório de referência).\nPasso 2: Verifique a instalação Confirme se a instalação funcionou rodando esse comando:\nrit --version Se tudo estiver configurado, o terminal irá retornar o número da versão atual do Ritchie.\n","excerpt":" Requisitos (somente para versões anteriores a 2.0.6)  O comando make. …","language":"content/pt-br","ref":"/pt-br/primeiros-passos/linux/","title":"Instalação do CLI para Linux"},{"body":"feature   May 2021 Add command ‘rit list formulas’.\nAdd a force-update option to execute the last formula version when enabled.\nAdd lib to support Ritchie-CLI internationalization.\nAdd the first part of the formula output feature.\nDetect new repo version using cache.\nCreate configuration to force formula’s execution in the latest version.\nAdd configuration to mount volumes via config.json.\nCreate a formula and check config.json file to see the release tag.\n  fix   May 2021 Fix files created by the formula belonging to the root user.\nChange the invocation command from ‘docker’ to ‘com.docker.cli’ when the runtime env is Windows or MacOS.\nFix formula’s outputs.\n  chore   May 2021 Add tests and support flags for rit delete repo.\nSave and reuse repo credentials for private repositories.\nAdd a friendlier error message on update repository.\nTest refactor of flag package.\nAdd tests with testify for delete repository.\nRemove stale bot.\nImprove metrics extracted by input flags.\nTest refactor of a flag package.\n  docs   May 2021 Documentation migration from Gitbook to Hugo.\n   Check out Ritchie’s Release Notes.\n","excerpt":"feature   May 2021 Add command ‘rit list formulas’.\nAdd a force-update …","language":"content/en","ref":"/reference/release-notes/","title":"Release Notes"},{"body":"feature   Julho 2021 Adição do comando ‘rit list formulas’.\nAdição de uma atualização com a opção para executar a última versão de uma fórmula quando ativada.\nAdição de uma biblioteca para dar suporte a internacionalização do Ritchie-CLI.\nAdição da primeira parte do recurso de saída da fórmula.\nDetecção da nova versão do repo usando o cache.\nCriação de uma configuração para forçar a execução da fórmula na versão mais recente.\nAdição de uma configuração para mount volumes via config.json.\nCriação da fórmula e verificação do arquivo config.json para ver a tag da release.\n  fix   Julho 2021 Atualização da execução de uma fórmula com Docker para evitar a criação de arquivos com o dono root.\nAdição de um suporte para Docker da versão mais nova até a mais antiga para usuários do MacOS e WSL.\nCorreção das saídas de fórmulas (formulas outputs).\n  chore   Julho 2021 Adição de testes e sinalizadores de suporte para rit delete repo.\nMelhoria na mensagem de erro no repositório de atualização.\nMelhoria para salvar e reutilizar credenciais de repositórios para repositórios privados.\nTestes de refatoração dos pacotes das flags.\nAdição de testes com o testify para repositórios delete.\nRemoção do bot stale.\nMelhoria das métricas extraídas pelas input flags.\n  docs   Junho 2021 Migração da documentação do Gitbook para o Hugo.\n   Veja mais em Release Notes.\n","excerpt":"feature   Julho 2021 Adição do comando ‘rit list formulas’.\nAdição de …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/release-notes/","title":"Release Notes"},{"body":" Requirements (only for versions prior to 2.0.6)  The make command (Using “make” on macOS). md5sum tools.  To install md5sum with Homebrew , use: brew install md5sha1sum\nTo install md5sum with MacPorts , use: sudo port install md5sha1sum\n Step 1: Installing command First option To install the latest version, run the command below in the terminal:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash  Note: To install Ritchie on servers or Docker containers (without sudo user), use the following command:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | sed -e 's/sudo//g' | bash   If you prefer, you also can follow with themanual installation..  Second option You can also download the Ritchie CLI package through the command line below, to install it manually.\ncurl --output ~/Desktop/Ritchie-CLI-macos-installer-x64.pkg --location https://commons-repo.ritchiecli.io/latest/Ritchie-CLI-macos-installer-x64.pkg Step 2: Verify the installation Confirm if your installation worked, run the command below:\nrit --version If everything’s configured, the terminal will return Ritchie’s current version.\n","excerpt":" Requirements (only for versions prior to 2.0.6)  The make command …","language":"content/en","ref":"/getting-started/macos/","title":"CLI installation for Macos"},{"body":" Requisitos (somente para versões anteriores a 2.0.6)  O comando make (Veja como usar “make” no macOS) Ferramentas md5sum  Para instalar md5sum with Homebrew , use: brew install md5sha1sum\nPara instalar md5sum with MacPorts , use: sudo port install md5sha1sum\n Passo 1: Rode o comando de instalação Primeira opção Para instalar a ultima versão, execute no terminal o comando abaixo:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash  Observação: Para instalar o Ritchie em servidores ou contêineres Docker (sem o usuário sudo), use o seguinte comando:\ncurl -fsSL https://commons-repo.ritchiecli.io/install.sh | sed -e 's/sudo//g' | bash   Se preferir, você também pode seguir com a instalação manual.  Segunda opção Você também pode fazer o download do pacote do Ritchie CLI e instalá-lo manualmente através da linha de comando abaixo:\ncurl --output ~/Desktop/Ritchie-CLI-macos-installer-x64.pkg --location https://commons-repo.ritchiecli.io/latest/Ritchie-CLI-macos-installer-x64.pkg Passo 2: Verifique a instalação Confirme se a instalação funcionou, rode o comando abaixo:\nrit --version Se tudo estiver configurado, o terminal irá retornar o número da versão atual do Ritchie.\n","excerpt":" Requisitos (somente para versões anteriores a 2.0.6)  O comando make …","language":"content/pt-br","ref":"/pt-br/primeiros-passos/macos/","title":"Instalação do CLI para Macos"},{"body":" To install the latest version of Ritchie on Windows, you have to download Ritchie’s installer and run it on your terminal.\nStep 1: Download the installer You can download Ritchie:\n Using this link to the latest version; Or any version you want: just paste the URL on your browser replacing the {VERSION} field according to the repository’s project tags:  https://commons-repo.ritchiecli.io/{VERSION}/installer/ritchiecli.msi  To download version 2.12.0 use the following URL:\nhttps://commons-repo.ritchiecli.io/2.10.0/installer/ritchiecli.msi    Or with Winget:  winget install Ritchie-CLI If you don’t have winget installed by default on your pc, go to Microsoft store search for winget and install it or maybe you just need to update it.\nWhen you finish, follow the instructions on your terminal after running the rit command.\nIf you prefer, you also can proceed with themanual installation..  Step 2: Verify the installation Confirm if your installation went well, run the command below:\nrit --version If everything’s configured, the terminal will return Ritchie’s current version.\n","excerpt":" To install the latest version of Ritchie on Windows, you have to …","language":"content/en","ref":"/getting-started/windows/","title":"CLI installation for Windows"},{"body":" Para instalar a última versão do Ritchie, você precisa fazer o download do instalador e executá-lo no seu terminal.\nPasso 1: Faça download do instalador Você tem duas formas de instalar o Ritchie:\n Usando esse link da última versão. Ou qualquer versão usando a URL no seu navegador, substituindo o campo {VERSION} de acordo com a tag do repositório do projeto:  https://commons-repo.ritchiecli.io/{VERSION}/installer/ritchiecli.msi  Para baixar a versão 2.10.0 use o seguinte URL:\nhttps://commons-repo.ritchiecli.io/2.12.0/installer/ritchiecli.msi    Ou com Winget:  winget install Ritchie-CLI Caso não tenha o winget por padrão no seu computador, basta procurar no Microsoft Store, talvez seja necessário instalar ou atualizar.\nAgora, siga as instruções que irão aparecer no seu terminal ao executar o comando rit.\nSe preferir, você também pode seguir com a instalação manual..  Passo 2: Verifique a instalação Você pode confirmar se a instalação funcionou rodando esse comando:\nrit --version Se tudo estiver configurado, o terminal irá retornar o número da versão atual do Ritchie.\n","excerpt":" Para instalar a última versão do Ritchie, você precisa fazer o …","language":"content/pt-br","ref":"/pt-br/primeiros-passos/windows/","title":"Instalação do CLI para Windows"},{"body":" Como baixar o binário do Ritchie?  Step 1: Escolha a versão que deseja instalar.   Você pode encontrar a última versão disponível na página de Última Versão. Você pode escolher uma versão específica na página de Todas Versões.    Step 2: Entre na URL apropriada para seu sistema substituindo {VERSION} pela versão escolhida.  URL do binário Linux MacOS Windows https://commons-repo.ritchiecli.io/{VERSION}/linux/rit Exemplo: Se você escolheu a versão 2.11.3, use este URL:\nhttps://commons-repo.ritchiecli.io/2.11.3/linux/rit    https://commons-repo.ritchiecli.io/{VERSION}/darwin/rit Exemplo: Se você escolheu a versão 2.11.3, use este URL:\nhttps://commons-repo.ritchiecli.io/2.11.3/darwin/rit    https://commons-repo.ritchiecli.io/{VERSION}/windows/rit.exe Exemplo: Se você escolheu a versão 2.11.3, use este URL:\nhttps://commons-repo.ritchiecli.io/2.11.3/windows/rit.exe    Configurações manuais Como criar uma pasta?  Rode o comando abaixo para criar uma pasta $HOME/.rit/bin.  mkdir -p $HOME/.rit/bin Depois, copie e cole o binário na pasta criada acima.  ​cd $HOME/.rit/bin cp $HOME/Downloads/rit Por último, rode a permissão para executar:  chmod +x rit Como configurar o .bashrc ou /etc/profile ou .zshrc (Linux / MacOS)? Para o ZSH, defina o novo PATH copiando o código abaixo:\nexport RIT_PATH=$HOME/.rit PATH=$RIT_PATH/bin:$PATH rit completion zsh \u003e ~/.rit_completion source ~/.rit_completion Para o Bash, defina o novo PATH copiando o código abaixo:\nexport RIT_PATH=$HOME/.rit PATH=$RIT_PATH/bin:$PATH rit completion bash \u003e ~/.rit_completion source ~/.rit_completion​ Configurações de variáveis de ambiente (Windows)? No caso do Windows, você precisa chamar o rit no terminal diretamente pelo rit.exe. Por exemplo: comando rit.exe login.\nÉ possível e recomendado que você crie uma variável de ambiente para o rit, tornando o uso do CLI mais fácil.\nLeia Mais Confira alguns artigos que explicam como adicionar uma variável de ambiente no Windows:\n Adicionando por meio da interface. Adicionando por meio do terminal.  ","excerpt":" Como baixar o binário do Ritchie?  Step 1: Escolha a versão que …","language":"content/pt-br","ref":"/pt-br/primeiros-passos/instala%C3%A7%C3%A3o-manual/","title":"Instalação Manual"},{"body":" How to download Ritchie binary?  Step 1: Choose the version you want to install.    You can find the latest version available, checkou the Latest page.\n  You can choose a specific version, check out the All versions page.\n    Step 2: Get the appropriate URL for your system and paste it into the browser, replacing {VERSION} with the version you chose.  Binary URL Linux MacOS Windows https://commons-repo.ritchiecli.io/{VERSION}/linux/rit Example: If you chose the version 2.11.3 use this URL:\nhttps://commons-repo.ritchiecli.io/2.11.3/linux/rit    https://commons-repo.ritchiecli.io/{VERSION}/darwin/rit Example: If you chose the version 2.11.3 use this URL:\nhttps://commons-repo.ritchiecli.io/2.11.3/darwin/rit    https://commons-repo.ritchiecli.io/{VERSION}/windows/rit.exe Example: If you chose the version 2.11.3 use this URL:\nhttps://commons-repo.ritchiecli.io/2.11.3/windows/rit.exe    Manual settings How to create a folder?  Run the command below to create a folder $HOME/.rit/bin  mkdir -p $HOME/.rit/bin Copy and paste the binary to the folder above:  ​cd $HOME/.rit/bin cp $HOME/Downloads/rit Run a permission to run:  chmod +x rit How to configure the .bashrc or /etc/profile or .zshrc (Linux / MacOS) To ZSH, define a new PATH by copying the following code:\nexport RIT_PATH=$HOME/.rit PATH=$RIT_PATH/bin:$PATH rit completion zsh \u003e ~/.rit_completion source ~/.rit_completion To Bash, define a new PATH by copying the following code:\nexport RIT_PATH=$HOME/.rit PATH=$RIT_PATH/bin:$PATH rit completion bash \u003e ~/.rit_completion source ~/.rit_completion​ Setting environment variables (Windows) For this operating system, you need to call rit on the terminal directly from rit.exe (rit.exe login command for example)\nIt is possible and we suggest to create an environment variable for rit to facilitate the use of the CLI.\nRead More Here are some articles explaining how to add an environment variable in Windows:\n Adding through interface Addingthrough terminal  ","excerpt":" How to download Ritchie binary?  Step 1: Choose the version you want …","language":"content/en","ref":"/getting-started/manual-installation/","title":"Manual Installation"},{"body":"","excerpt":"","language":"content/en","ref":"/getting-started/","title":"Getting Started"},{"body":"","excerpt":"","language":"content/pt-br","ref":"/pt-br/primeiros-passos/","title":"Primeiros Passos"},{"body":" Veja abaixo os passos para você inicializar a CLI:\nPasso 1: Inicialização Execute o comando para inicializar o Ritchie:\nrit init Esse comando vai pedir três informações:\n Se o usuário quer contribuir anonimamente as métricas do produto. Se o usuário quer adicionar as fórmulas da comunidade localmente. Qual método de execução o usuário deseja usar por padrão (local ou docker). método de execução de fórmulas local ou via docker.  Depois disso, todos os arquivos de configuração para a máquina funcionar serão criados.\nPasso 2: Verifique a inicialização 1. Repositório da comunidade Se você adicionou o repositório da comunidade, é possível verificar a importação com o comando:\nrit list repo Esse comando retorna todos os repositórios de fórmulas que o usuário tem acesso localmente.\n2. Pasta Ritchie Você pode verificar se a pasta .rit foi criada no diretório $HOME da máquina.\nTodas as operações realizadas usando o Ritchie são salvas nessa pasta .rit (credenciais, repos, métricas…).  ","excerpt":" Veja abaixo os passos para você inicializar a CLI:\nPasso 1: …","language":"content/pt-br","ref":"/pt-br/primeiros-passos/inicializa%C3%A7%C3%A3o-do-cli/","title":"Inicialização do CLI"},{"body":" See the steps below to initialize the CLI:\nStep 1: Initialization Run the following command to initialize Ritchie:\nrit init This command will ask three information:\n If the user wants to contribute anonymously to Ritchie metrics. If the user wants to add the community formulas locally. Which execution method the user wants to use by default (local or docker). formula execution method.  After this, the command will create all the necessary configuration’s files.\nStep 2: Verify Initialization 1. Commons repository If you added the community formulas repository, verify the import using the following command:\nrit list repo This command will return all formulas repositories the user has local access to.\n2. Ritchie folder You can check if the .rit folder has been created on your $HOME directory.\nAll operations done using Ritchie will be saved in this .rit folder (credentials, repos, metrics…).  ","excerpt":" See the steps below to initialize the CLI:\nStep 1: Initialization Run …","language":"content/en","ref":"/getting-started/initialize-cli/","title":"Initialize CLI"},{"body":" When a new Ritchie CLI version is released, a warning will appear when executing one of the following commands:\n rit (helper) rit -v (version)   If you want to upgrade the Ritchie CLI version when this warning appears, run the following command:\nrit upgrade Example of the command output for the 2.6.0 version ➜ rit upgrade Rit upgraded with success Release 2.6.0 description: * Added multiselect input for formulas * User is notified when adding the same repo and version * Release notes are displayed on every upgrade * Rit add repo will only add valid repos * Context commands substituted by env commands * Deprecated stdin This output is based on the description of the release tag on the ritchie-cli releases page on Github.\n","excerpt":" When a new Ritchie CLI version is released, a warning will appear …","language":"content/en","ref":"/getting-started/upgrade-cli/","title":"Upgrade CLI"},{"body":" Quando for lançada uma nova versão do CLI version, um aviso irá aparecer quando você for executar um dos comandos abaixo:\n rit (helper) rit -v (version)   Para atualizar a versão do Ritchie CLI quando a mensagem aparecer, rode o seguinte comando:\nrit upgrade Exemplo de comando output para versão 2.6.0 ➜ rit upgrade Rit upgraded with success Release 2.6.0 description: * Added multiselect input for formulas * User is notified when adding the same repo and version * Release notes are displayed on every upgrade * Rit add repo will only add valid repos * Context commands substituted by env commands * Deprecated stdin Esse output é baseado na descrição da tag da release na página de release notes do ritchie-cli no Github.\n","excerpt":" Quando for lançada uma nova versão do CLI version, um aviso irá …","language":"content/pt-br","ref":"/pt-br/primeiros-passos/upgrade-do-cli/","title":"Upgrade do CLI"},{"body":" ","excerpt":" ","language":"content/en","ref":"/formulas/","title":"Formulas"},{"body":" ","excerpt":" ","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/","title":"Fórmulas"},{"body":" Como executar? Você tem duas maneiras de executar fórmulas usando o Ritchie:\n Localmente Usando o Docker  O método de execução de fórmulas padrão é escolhido durante a etapa de inicialização do Ritchie com o comando rit init. Você pode alterar essa configuração executando o comando abaixo:\nrit set formula-runner 1. Execução local Para executar uma fórmula localmente, é necessário ter instalada no computador a linguagem de programação que foi usada para desenvolver a fórmula.\n Exemplo: uma fórmula desenvolvida em Java precisará ter Java instalado na máquina para ser executada localmente.  2. Execução via Docker Todas as fórmulas podem ser executadas sem depender da linguagem usada, desde que o DOCKER esteja instalado e iniciado.\nPara mais informações sobre como essa execução funciona na prática, veja a seção fórmula hello world .  Veja como: Acesse no Docker:\n Preferences \u003e Command Line\u003e Enable cloud experience.   3. Local \u0026 Docker Flags É possível forçar o Ritchie CLI a executar uma fórmula seguindo um método de execução específico, usando flags.\n A flag --local executará a fórmula localmente (se o método de execução padrão for o Docker). A flag --docker executará a fórmula com Docker (se o método de execução padrão for local).  4. Containers com Ritchie Todos os templates de fórmulas contém um arquivo DockerFile que cria um container com Ritchie CLI instalado.  Próximos passos Para continuar aprendendo mais sobre fórmulas:\n👉 Vá para página Fórmula Hello World e descubra as diferentes maneiras de executar uma fórmula no Ritchie.\n👉 Vá para página como criar fórmulas para entender o passo a passo para criar sua primeira automação usando o Ritchie.\n","excerpt":" Como executar? Você tem duas maneiras de executar fórmulas usando o …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/executar-f%C3%B3rmulas/","title":"Executar fórmulas"},{"body":" How to run formulas? There are two ways to run formulas on Ritchie:\n Locally Using Docker  The default formulas execution method is defined during the initialization step with the rit init command. You can change this setting by running the following command:\nrit set formula-runner 1. Locally To run a formula locally, it is necessary to have installed on your computer the formula programming languages dependencies used to create the formula.\n Example: A formula written in Java will need Java installed on the computer, so it will be able to run locally.  2. Through Docker All formulas can run regardless the programming language used from the moment you have DOCKER installed and running.\nFor more information about this execution, check out the “Hello World” formula section .  Docker user on MacOS: To avoid the ‘Error: exit status 1’, you have to disable the Cloud Experience, depending on your version.\nSee how: Access on Docker:\n Preferences \u003e Command Line\u003e Enable cloud experience.   3. Local \u0026 Docker Flags You can force Ritchie CLI to execute a formula with a specific method using flags.\n The --local flag will execute a formula with locally (if the default method is Docker). The --docker flag will execute a formula with Docker (if the default method is local).  4. Containers with Ritchie All formulas templates contain a Dockerfile which creates a container with Ritchie CLI installed.  Next steps To keep learning about formulas:\n👉 Go to Hello World formula to see different ways to run a formula on Ritchie.\n👉 Go to the create formulas section to understand how to create your first automation with Ritchie.\n","excerpt":" How to run formulas? There are two ways to run formulas on Ritchie: …","language":"content/en","ref":"/formulas/run-formula/","title":"Run Formula"},{"body":" Hello World Premissa: Depois que você finalizou a instalação e a inicialização do Ritchie - agora você pode acessar a fórmula hello world para testar. Você precisa adicionar o repositório ritchie-formulas-demo localmente.  Para adicionar o repositório ritchie-formulas-demo localmente, você pode usar o comando rit add repo ou executar a linha de comando abaixo:\nrit add repo --provider=\"Github\" --name=\"demo\" --repoUrl=\"https://github.com/ZupIT/ritchie-formulas-demo\" --priority=1  É possível ainda verificar os repositórios estão sendo usados executando o comando rit list repo.  Agora você pode executar os comandos desse tutorial.\nPremissa: Confira os detalhes da fórmula Para obter os detalhes de uso de uma fórmula, é possível executar o comando usando a flag --help:\nrit demo hello-world --help O retorno informa todas as flags disponíveis para a execução do comando.\nCenários No Ritchie, é possível, você tem 6 possibilidades de rodar uma fórmula por meio dessas flags:\n Via Prompt Via Prompt e Docker Via Input Flags Via Input Flags e Docker Via Stdin Via Stdin e Docker  Você pode ver cada caso abaixo, escolha um caso e escreva um dos comandos.\nOpção 1: Usando Prompt Como essa fórmula foi desenvolvida usando Golang, é preciso ter Golang instalado para conseguir executá-la localmente.  rit demo hello-world Selecione uma opção para cada parâmetro de entrada e veja a mágica acontecer:\nEssa é a execução padrão de linhas de comando no Ritchie, executando fórmulas localmente através de prompt (interagindo com o CLI no terminal) para informar os parâmetros de entrada.\nOpção 2: Usando Prompt \u0026 Docker Você pode rodar o mesmo comando usando a flag –docker para executar a fórmula remotamente (em um container), mas ainda informando os parâmetros de entrada via prompt:\nrit demo hello-world --docker  O Docker precisa estar instalado e iniciado para conseguir executar comandos usando essa flag. Nesse caso, não é necessário ter Golang instalado.  Opção 3: Usando Input Flags Você também pode executar o comando informando as entradas por meio de flags (você pode saber quais flags estão disponíveis usando a flag --help ao executar um comando). Desta forma, os parâmetros de entradas são informados diretamente na linha de comando.\nrit demo hello-world --rit_input_text=\"Dennis\" --rit_input_boolean=true --rit_input_list=\"everything\" --rit_input_password=\"Ritchie\" Opção 4: Usando Input Flags \u0026 Docker Ao combinar os input flags com a flag do --docker, é possível executar um comando remotamente (em um contêiner) com os parâmetros de entrada informados diretamente na linha de comando:\nrit demo hello-world --rit_input_text=\"Dennis\" --rit_input_boolean=true --rit_input_list=\"everything\" --rit_input_password=\"Ritchie\" --docker Opção 5: Usando Stdin É também possível executar comando usando a flag --stdin (Standard Input). Dessa maneira, os parâmetros de entrada podem ser informados diretamente na linha de comando inicial:\necho '{\"rit_input_text\":\"Dennis\", \"rit_input_boolean\":\"true\", \"rit_input_list\":\"everything\", \"rit_input_password\":\"Ritchie\"}' | rit demo hello-world --stdin  Ritchie usa o formato JSON para executar comandos STDIN.  Opção 6: Usando Stdin Quando são usadas as 2 flags –stdin e –docker, é possível executar o comando remotamente informando os parâmetros de entrada na linha de comando inicial:\necho '{\"rit_input_text\":\"Dennis\", \"rit_input_boolean\":\"true\", \"rit_input_list\":\"everything\", \"rit_input_password\":\"Ritchie\"}' | rit demo hello-world --stdin --docker  Dê uma olhada nas fórmulas da comunidade (ex: ritchie-formulas). A maioria das fórmulas tem um arquivo README explicando como executar a fórmula e para que ela serve.  Próximos passos  Veja como criar suas fórmulas .  ","excerpt":" Hello World Premissa: Depois que você finalizou a instalação e a …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/executar-uma-f%C3%B3rmula-hello-world/","title":"Executar uma fórmula \"Hello World\""},{"body":" Hello World Premisse: After you finished installing and initializing Ritchie - now you can access the hello-world formula to test. You will need to add the ritchie-formulas-demo repository locally.  To add the ritchie-formulas-demo repository locally, you can use the rit add repo command, or run the command line below:\nrit add repo --provider=\"Github\" --name=\"demo\" --repoUrl=\"https://github.com/ZupIT/ritchie-formulas-demo\" --priority=1  You can also check which repositories you’re using with the rit list repo command.  Now, check the details of the formula, you can execute this tutorial commands.\nPremisse: Check the formula’s details To get details about a formula, you can execute the command using with the --help flag:.\nrit demo hello-world --help It will return all the flags available for the command execution.\nScenarios On Ritchie, you have 6 possibilities to run a formula through these flags:\n Via Prompt Via Prompt e Docker Via Input Flags Via Input Flags e Docker Via Stdin Via Stdin e Docker  You can see them below, choose a case and type the following commands lines.\nOption 1: With Prompt As this formula has been coded using Golang, it is necessary to have Golang installed on your computer to run it locally.  rit demo hello-world Select an option for each input parameter and see how the magic works:\nThis is the default command line execution, that runs the formula locally using prompt to inform the input parameters.\nOption 2: With Prompt and Docker You can run the same command using the –docker flag pto execute it remotely (on a container), but still using prompt to inform the inputs parameters:\nrit demo hello-world --docker  Docker needs to be installed and running on your computer for this flag to work. In that case, you won’t need to have Golang installed.  Option 3: With Input Flags You can also run the command informing the inputs through flags (you can know which flags are available using the --help flag when executing a command). This way, inputs parameters are informed directly with the command line.\nrit demo hello-world --rit_input_text=\"Dennis\" --rit_input_boolean=true --rit_input_list=\"everything\" --rit_input_password=\"Ritchie\" Option 4: With Input flags and Docker When you combine both input flags and the --docker flag, it is possible to run a command remotely (on a container) with the input parameters directly informed on the command line:\nrit demo hello-world --rit_input_text=\"Dennis\" --rit_input_boolean=true --rit_input_list=\"everything\" --rit_input_password=\"Ritchie\" --docker Option 5: With Stdin You can also run the command with the --stdin (Standard input) flag. This way, inputs parameters are also informed directly with the command line.\necho '{\"rit_input_text\":\"Dennis\", \"rit_input_boolean\":\"true\", \"rit_input_list\":\"everything\", \"rit_input_password\":\"Ritchie\"}' | rit demo hello-world --stdin  Ritchie uses the JSON format to execute STDIN commands  Option 6: With Stdin and Docker When you combine both –stdin and –docker flags, it is also possible to run a command remotely (on a container) with the input parameters directly informed on the command line:\necho '{\"rit_input_text\":\"Dennis\", \"rit_input_boolean\":\"true\", \"rit_input_list\":\"everything\", \"rit_input_password\":\"Ritchie\"}' | rit demo hello-world --stdin --docker  Take a look at the formulas repositories (ex: ritchie-formulas). Most of the community formulas are composed of a README explaining what the command does and how to run it.  Next steps  Check out how to create a formula .  ","excerpt":" Hello World Premisse: After you finished installing and initializing …","language":"content/en","ref":"/formulas/hello-world-formula/","title":"Hello World formula"},{"body":" How to create? Step 1: Run the formula creation command Run the following command to create a formula:\nrit create formula Then, you’ll have to inform those inputs before running the formula:\n The command (following the pattern rit + group + verb + noun to respect the tree pattern). The formula’s programming language. The path used to save formula’s files.  Example: rit demo create formula\nStep 2: Test your formula You can test the formula directly after its creation. That’s possible because the rit create formula command also builds the formula automatically (it generates the formula’s executable files and add them on .rit folder).\nIn that case, the formula “Hello World” template will be executed as you can see below:\nThis template is composed of 4 inputs parameters, that represents the currently available kinds of inputs to use Ritchie:\n A sample text variable A sample list of text variables A sample boolean variable A sample password variable  When you finished creating your formula, it will be built and sent to a specific repository according to the name of your workspace with the prefix “local”.\nExample: If we have a workspace with Default name:\n{ \"Default\":\"/home/user/ritchie-formula-local\" } A repository associated to this workspace will be created on the /home/user/.rit/repos folder, and added on the repositories.json file.\n[ { \"provider\": \"Local\", \"name\": \"local-default\", \"version\": \"0.0.0\", \"url\": \"local repository\", \"priority\": 0, \"isLocal\": true } ] Next steps Keep configuring your formula:\n Go to organize the formula folder to see how to organize the formulas you create.  ","excerpt":" How to create? Step 1: Run the formula creation command Run the …","language":"content/en","ref":"/formulas/create-formulas/","title":"Create formulas"},{"body":" Como criar? Passo 1: Execute o comando de criação de formula Execute esse comando para criar uma fórmula:\nrit create formula Você deverá informar alguns parâmetros de entrada antes da sua execução:\n O comando (de preferência, com o padrão rit + grupo + verbo + substantivo para respeitar a árvore de comando). A linguagem de programação da fórmula. O caminho (path) para salvar os arquivos da fórmula.  Exemplo: rit demo create formula\nPasso 2: Teste sua fórmula Você pode testar diretamente a fórmula depois de sua criação. Isso é possível porque o comando rit create formula também constrói a fórmula automaticamente (ela gera os arquivos executáveis da fórmula e adiciona-os no .rit folder).\nNesse caso, o template da formula “Hello World” será executado como você pode ver abaixo:\nEste template é composto por 3 parâmetros de entrada, que representam os tipos de inputs atualmente disponíveis para serem usados no Ritchie:\n Uma amostra das variáveis de texto Uma amostra da lista de variáveis Uma amostra das variáveis booleanas Uma amostra das variáveis de password  Quando você terminar a criação da sua fórmula, ela será “buildada” e enviada para um repositório local específico de acordo com o nome do seu workspace, com o prefixo “local”.\nExemplo: Se um workspace aparecer com o nome Default:\n{ \"Default\":\"/home/user/ritchie-formula-local\" } Um repositório associado a esse workspace será criado na pasta /home/user/.rit/repos, e adicionado no arquivo repositories.json:\n[ { \"provider\": \"Local\", \"name\": \"local-default\", \"version\": \"0.0.0\", \"url\": \"local repository\", \"priority\": 0, \"isLocal\": true } ] Próximos passos Continue configurando a sua fórmula:\n Vá para a seção de como organizar uma pasta de fórmula para entender como editar os arquivos que o Ritchie cria depois da criação de uma fórmula.  ","excerpt":" Como criar? Passo 1: Execute o comando de criação de formula Execute …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/criar-f%C3%B3rmulas/","title":"Criar fórmulas"},{"body":" O que é uma pasta de fórmula? Esta pasta contém arquivos com comportamento da fórmula.\nA estrutura das pastas define os comandos tree, por isso não é recomendando que você atualize o nome dessas pastas, ou inclua mais arquivos e/ou pastas, a menos que seja uma pasta src/*.  Cada linguagem de programação possui suas próprias especificidades, mas a estrutura da fórmula é quase a mesma. Não importa em qual linguagem seja usada, ela irá conter:\n   Arquivo Descrição     config.json Arquivo para configurar os parâmetros de entrada da fórmula.   main file Arquivo para extrair variáveis locais.   pkg/formula file Arquivo para implementar a operação da fórmula.   Dockerfile Arquivo para “buildar” imagens no Docker.   README file Arquivo para explicar o que faz uma fórmula.   Makefile file Arquivo para compilar o código da fórmula (será depreciado em 03/2021).   build.sh file Arquivo para compilar o código da fórmula em shell.   metadata.json file Arquivo para “taguear” informações de uma fórmula.   set_unmask.sh file Arquivo usado pelo Makefile file   help.json files Arquivos usados para configurar mensagens de ajuda da fórmula no CLI.     Você pode encontrar todos os templates de linguagens no repositório ritchie-formulas.  Exemplos de pastas de fórmulas Golang Java Node Python Shell De acordo com a imagem acima, você deve editar os arquivos:\n config.json: Alterar os inputs e suas configurações. main.go: Extrair os inputs, e chamar os métodos da fórmula (na pasta formula/*). formula/*: Implementar a lógica da fórmula. help.json: Alterar a mensagem de descrição do comando.   De acordo com a imagem acima, você deve editar os arquivos:\n config.json: Alterar os inputs e suas configurações. main.java: Extrair os inputs, e chamar os métodos da fórmula (na pasta formula/*). formula/*: Implementar a lógica da fórmula. help.json: Alterar a mensagem de descrição do comando.   De acordo com a imagem acima, você deve editar os arquivos:\n config.json: Alterar os inputs e suas configurações. index.js: Extrair os inputs, e chamar os métodos da fórmula (na pasta formula/*). formula/*: Implementar a lógica da fórmula. help.json: Alterar a mensagem de descrição do comando.   De acordo com a imagem acima, você deve editar os arquivos:\n config.json: Alterar os inputs e suas configurações. main.py: Extrair os inputs, e chamar os métodos da fórmula (na pasta formula/*). formula/*: Implementar a lógica da fórmula. help.json: Alterar a mensagem de descrição do comando.   De acordo com a imagem acima, você deve editar os arquivos:\n config.json: Alterar os inputs e suas configurações. main.sh: Extrair os inputs, e chamar os métodos da fórmula (na pasta formula/*). formula/*: Implementar a lógica da fórmula. help.json: Alterar a mensagem de descrição do comando.   ","excerpt":" O que é uma pasta de fórmula? Esta pasta contém arquivos com …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/organizar-a-pasta-de-f%C3%B3rmulas/","title":"Organizar a pasta de fórmulas"},{"body":" What is the formula folder? This folder contains the files with the formula’s behavior.\nThe folder structure defines the command tree, so it’s not indicated to update folders names or include more files and/or folders, if not in the src/*. folder.  Each programming language has its own specificities, but the formula’s structure is almost always the same, no matter what language is used, and will contain:\n   File Description     config.json File to configure the formula inputs.   main file File to extract local variables.   pkg/formula file File to implement the formula operation.   Dockerfile File to build docker images.   README file File to explain what the formula does.   Makefile file File to compile the formula’s code (will be deprecated 03/2021).   build.sh file File to compile the formula’s code in shell.   metadata.json file File to tag the formula’s information.   set_unmask.sh file File used by the Makefile file.   help.json files File to configure formula helper messages on the CLI.     You can find all languages templates on the ritchie-formulas repository.  Formula folder examples Golang Java Node Python Shell To change the formula’s behavior for this language, you’ll have at least to update the following files:\n config.json: Update the inputs configurations. main.go: Extract the inputs and call the formula’s methods (coded on formula/*). formula/*: Code the formula’s behavior. help.json: Change command description message.   To change the formula’s behavior for this language, you’ll have at least to update the following files:\n config.json: Update the inputs configurations. main.java: Extract the inputs and call the formula’s methods (coded on formula/*). formula/*: Code the formula’s behavior. help.json: Change command description message.   To change the formula’s behavior for this language, you’ll have at least to update the following files:\n config.json: Update the inputs configurations. index.js: Extract the inputs and call the formula’s methods (coded on formula/*). formula/*: Code the formula’s behavior. help.json: Change command description message.   To change the formula’s behavior for this language, you’ll have at least to update the following files:\n config.json: Update the inputs configurations. main.py: Extract the inputs and call the formula’s methods (coded on formula/*). formula/*: Code the formula’s behavior. help.json: Change command description message.   To change the formula’s behavior for this language, you’ll have at least to update the following files:\n config.json: Update the inputs configurations. main.sh: Extract the inputs and call the formula’s methods (coded on formula/*). formula/*: Code the formula’s behavior. help.json: Change command description message.   ","excerpt":" What is the formula folder? This folder contains the files with the …","language":"content/en","ref":"/formulas/organize-the-formula-folder/","title":"Organize the formula folder"},{"body":" O que é um arquivo config (config.json file)? O arquivo config.json contém os parâmetros de entrada da fórmula. Ele permite que o CLI saiba quais dados devem ser pedidos ao usuário quando ele executa o comando no terminal, a fim de que processe a fórmula corretamente.\nEssas entradas são feitas para os seguintes campos:\n dockerImageBuilder: Uma imagem para buildar o docker (de acordo com a linguagem de programação escolhida para criar a fórmula). dockerVolumes: Lista de volumes locais que você deseja montar no container de execução em docker. inputs: Lista com os parâmetros de entrada de uma fórmula. requireLatestVersion: Um parâmetro booleano que indica a necessidade (ou não) de uma fórmula ser executada na última versão do repositório.  { \"dockerImageBuilder\": \"dockerImage\", \"dockerVolumes\": [], \"inputs\": [], \"requireLatestVersion\": false, } Configuração dos volumes do Docker a serem mapeados Para cada volume que será mapeado, você deve informar a origem e o destino, utilizando dois pontos \":\" como separador.\nExemplo: O diretório de origem sendo /home/user-name/folder e o diretório de destino /mount/folder\n{ \"dockerVolumes\": [ \"/home/user-name/folder:/mount/folder\" ], } Configuração dos parâmetros de entrada Cada parâmetro de entrada é composto pelos seguintes campos:\nCampos obrigatórios  name: nome da variável para extração.  Uma vez que o valor de um parâmetro de entrada é informado no Ritchie CLI, ele é salvo como uma variável local durante a execução da fórmula.\nO nome da variável será convertida em maiúscula como o nome da variável local.\n  Uma boa prática é adicionar o sufixo _RIT_ para cada input name para evitar conflitos com variáveis locais. Exemplo: rit_file_name –\u003e RIT_FILE_NAME\n  type:  text (string). bool (boolean). password (string escondida no CLI). multiselect lista valores predefinidos, é possível selecionar vários valores (string). credentials (tipo específico, veja mais sobre nesse tutorial). dynamic (associado ao campo opcionalrequest_info). path: habilita o autocomplete para o usuário informar o passo para uma pasta ou um arquivo (string).   label: texto que aparecerá no CLI para pedir o input ao usuário.  Exemplo de parâmetro de entrada com campos obrigatórios: { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", } Exemplo de parâmetro de entrada com o tipo multiselect: { \"label\": \"Choose one or more days: \", \"name\": \"rit_days\", \"type\": \"multiselect\", \"required\": true, \"items\": [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Friday\" ] } Algumas observações sobre o tipo multiselect  Para selecionar uma das opções com o tipo multiselect:   Aperte a chave space (a chave enter irá mover para o próximo parâmetro de entrada, se houver).  As opções selecionadas no campo do tipo multiselect retornam:   Uma string com as opções separadas por barra (|) e sem espaço, por exemplo: Monday | Wednesday | Friday.  Use o campo required como true, caso contrário, se não houver uma opção selecionada, a variável local será salva como undefined.  Exemplo de parâmetro de entrada usando o tipo autocomplete: { \"label\": \"Type the path to the folder with your file:\", \"name\": \"rit_path\", \"type\": \"path\", } Campos opcionais  default: Valor padrão do parâmetro (se valor é nulo).  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"default\": \"Dennis\" }  Você pode ainda fazer essa configuração default com a flag default, que te permite atribuir valores default configurados na fórmula.\nCaso não haja campos com valor default, a flag continuará solicitando os parâmetros de entrada que devem ser configurados no seu arquivo config.json.\n  required: Boolean que indica se um campo é obrigatório ou opcional.  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"required\": true }  tutorial: Campo de ajuda para o parâmetro de entrada [? for help]  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"tutorial\": \"We are expecting you to write your name (ex: John)\" }  items: Lista de opções para o parâmetro.  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"items\": [ \"Dennis\", \"John\", \"Bill\" ] }  cache: Salva os valores de parâmetros de entrada anteriores.  active: Se o cache é habilitado ou não. qty: A quantidade de valor armazenada no cache. newLabel: Texto que aparece no CLI para pedir um novo input ao usuário.    { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"cache\": { \"active\": true, \"qty\": 5, \"newLabel\": \"Type another name:\" } }  condition: Esse parâmetro só aparece se a condicional funcionar.  variable: O nome da variável usada em um parâmetro anterior para comparação. operator: O operador lógico usado para comparar. Suporta ==, !=, \u003c, \u003e, \u003c= e \u003e=. value: O valor que você deseja usar para comparação.    { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"default\": \"Dennis\" }, { \"condition\": { \"variable\": \"rit_name\", \"operator\": \"!=\", \"value\": \"Dennis\" } \"label\": \"What is your date of birth?\", \"name\": \"rit_date_of_birth\", \"type\": \"text\", }  pattern: Configura a validação de um parâmetro de entrada.  regex: O modelo regex para validar o parâmetro. mismatchText: A mensagem de erro se o parâmetro de entrada seja invalidado pelo regex.    { \"label\": \"What is your age\", \"name\": \"rit_age\", \"type\": \"text\", \"pattern\": { \"regex\": \"[0-9]\", \"mismatchText\": \"Only a integer value is allowed here (ex: 20)\" } }  O tipo de entrada dinâmico será depreciado nas próximas liberações.   requestInfo: Configuração para ter o parâmetro de entrada do tipo dinâmico.  url: Uma URL que consome o serviço GET e é responsável por retornar a lista de objetos. jsonPath: O caminho da variável para extrair da lista retornada uma variável de cada objeto. Exemplo: \"jsonPath\": $['user']['name'] (Veja mais sobre como funciona esse path json).    { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"requestInfo\": { \"url\": \"https://my-url.com\", \"jsonPath\": $['user']['name'] } }  Cada fórmula contém quantos parâmetros de entrada forem necessários, assim como qualquer associação nos campos acima.  Exemplo de parâmetros de entrada com campo condicional e padrão Regex: \"inputs\": [ { \"label\": \"Select a system:\", \"name\": \"rit_system\", \"type\": \"text\", \"items\": [ \"LINUX\", \"MACOS\", \"WINDOWS\" ], \"required\": true, \"tutorial\": \"Select a System from the list.\" }, { \"condition\": { \"variable\":\"rit_system\", \"operator\":\"==\", \"value\":\"LINUX\" }, \"label\": \"Select a LINUX OS:\", \"name\": \"rit_linux_os\", \"type\": \"text\", \"items\": [ \"UBUNTU\", \"FEDORA\", \"CENTOS\" ], \"pattern\": { \"regex\": \"UBUNTU|FEDORA|CENTOS\", \"mismatchText\": \"Invalid option\" }, \"required\": false, \"tutorial\": \"Select an Linux Operating System from the list.\" } ]  Uma vez que o valor de um parâmetro de entrada é informado no Ritchie CLI, ele é salvo como uma variável local durante a execução da fórmula.  ","excerpt":" O que é um arquivo config (config.json file)? O arquivo config.json …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/arquivo-config/","title":"Configurar inputs"},{"body":" What is the config.json file? The config.json file contains the formula’s input parameters. It allows the CLI to know what data to ask the user when he runs the command in the terminal to process the formula correctly.\nThese input parameters are made up of the following fields:\n dockerImageBuilder: A docker image builder (according to the programming language chose at the formula creation). dockerVolumes: List of local volumes you want to mount in the docker run container. inputs: The formula inputs parameters list. requireLatestVersion: A boolean, indicating the need (or not) of the formula to run in the last available version of a repository.  { \"dockerImageBuilder\": \"dockerImage\", \"dockerVolumes\": [], \"inputs\": [], \"requireLatestVersion\": false, } Docker volume mapping configuration For each volume that will be mapped, you must inform its origin and destination, using a colon \":\" as a separator.\nExample: The source directory being /home/user-name/folder and the destination directory /mount/folder\n{ \"dockerVolumes\": [ \"/home/user-name/folder:/mount/folder\" ], } Input parameter configuration Each input parameter is composed of the following fields:\nMandatory fields  name: variable name to extract.  Once an input value is informed on Ritchie CLI, it is saved as a local variable during the formula execution.\nThe variable name will be convert uppercase as the local variable name.\n  A good practice is to add a _RIT_ suffix to each input name to avoid having conflicts with local variables.\nExample: rit_file_name –\u003e RIT_FILE_NAME\n  type:  text (string). bool (boolean). password (hidden string on CLI). multiselect list predefined values, it is possible to select multiple values (string). credentials (specific type, check out more on use crendential as formula inputs). dynamic (associated with the optional request_info field below). path: enables the autocomplete to inform a path to a folder or a file (string).   label: text appearing on the CLI, asking for the input.  Input example with mandatory fields: { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", } Input example with the multiselect type: { \"label\": \"Choose one or more days: \", \"name\": \"rit_days\", \"type\": \"multiselect\", \"required\": true, \"items\": [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Friday\" ] } Some observations regarding the multiselect type  To select one of the options with the multiselect type,   Press the space key (the enter key will move to the next input, if any).  The options selected in the multiselect type field will return a string with:   The options separated by pipe (|) and without space example: Monday | Wednesday | Friday  Use the required field as true, otherwise, if no option is selected, the local variable will be saved as undefined.  Parameter example using the autocomplete type: { \"label\": \"Type the path to the folder with your file:\", \"name\": \"rit_path\", \"type\": \"path\" } Optional fields  default: default input value (if value is null).  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"default\": \"Dennis\" }  You also can make this default configuration with the default flag, which allows you to attribute default values configured on the formula.\nIn case of fields without a default value, the flag will keep asking for this inputs that must be configured on your config.json file.\n  required: Boolean that indicates if the input value is required or optional.  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"required\": true }  tutorial: Input helper message [? for help]  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"tutorial\": \"We are expecting you to write your name (ex: John)\" }  items: List of input variable options.  { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"items\": [ \"Dennis\", \"John\", \"Bill\" ] }  cache: Saves former input values.  active: If the cache is enabled or not. qty: Amount of values to store. newLabel: Text appearing on the CLI asking for new input.    { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"cache\": { \"active\": true, \"qty\": 5, \"newLabel\": \"Type another name:\" } }  condition: It shows an input if the given condition succeeds.  variable: The variable name used on a previous input for comparison. operator: A logical operator to compare. Supports ==, !=, \u003c, \u003e, \u003c= and \u003e=. value: The desired value to compare to.    { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"default\": \"Dennis\" }, { \"condition\": { \"variable\": \"rit_name\", \"operator\": \"!=\", \"value\": \"Dennis\" } \"label\": \"What is your date of birth?\", \"name\": \"rit_date_of_birth\", \"type\": \"text\", }  pattern: Configure the input value validation.  regex: The regex pattern to validate the input. mismatchText: An error message when the input doesn’t match the regex pattern.    { \"label\": \"What is your age\", \"name\": \"rit_age\", \"type\": \"text\", \"pattern\": { \"regex\": \"[0-9]\", \"mismatchText\": \"Only a integer value is allowed here (ex: 20)\" } }  The dynamic input type will be deprecated in the next releases.   requestInfo: A configuration to get the dynamic input type.  url: An URL to consume a GET service that will return a list of objects. jsonPath: A JSON path where the variable extracts a returned list for every object, see \"jsonPath\": $['user']['name'] (Check out how the JSON path works).    { \"label\": \"Type your name:\", \"name\": \"rit_name\", \"type\": \"text\", \"requestInfo\": { \"url\": \"https://my-url.com\", \"jsonPath\": $['user']['name'] } }  Each formula can contain as many inputs as necessary, as well as any association of the above fields.  Conditional input example with Regex pattern: \"inputs\": [ { \"label\": \"Select a system:\", \"name\": \"rit_system\", \"type\": \"text\", \"items\": [ \"LINUX\", \"MACOS\", \"WINDOWS\" ], \"required\": true, \"tutorial\": \"Select a System from the list.\" }, { \"condition\": { \"variable\":\"rit_system\", \"operator\":\"==\", \"value\":\"LINUX\" }, \"label\": \"Select a LINUX OS:\", \"name\": \"rit_linux_os\", \"type\": \"text\", \"items\": [ \"UBUNTU\", \"FEDORA\", \"CENTOS\" ], \"pattern\": { \"regex\": \"UBUNTU|FEDORA|CENTOS\", \"mismatchText\": \"Invalid option\" }, \"required\": false, \"tutorial\": \"Select an Linux Operating System from the list.\" } ]  Once an input is informed on Ritchie CLI, it is saved as a local variable during the formula execution.  ","excerpt":" What is the config.json file? The config.json file contains the …","language":"content/en","ref":"/formulas/configure-inputs/","title":"Configure Inputs"},{"body":" What is the main file? The main file is used to extract the inputs asked in the config.json file, saved as local variables.\n Inputs are extracted by the field name informed on the config.json file UPPERCASE.   This file is also where the formula functions, manipulating the input parameters, are called to perform the operation and/or automation of the formula.\nMain file examples Check out the examples below, there is always an existing formula class with a Run() function:\nmain.go Main.java index.js main.py main.sh func main() { input1 := os.Getenv(\"INPUT_TEXT\") input2 := os.Getenv(\"INPUT_LIST\") input3, _ := strconv.ParseBool(os.Getenv(\"INPUT_BOOLEAN\")) input4 := os.Getenv(\"INPUT_PASSWORD\") formula.Formula{ Text: input1, List: input2, Boolean: input3, Password: input4, }.Run(os.Stdout) }  public class Main { public static void main(String[] args) { String inputText = System.getenv(\"INPUT_TEXT\"); boolean inputBoolean = Boolean.parseBoolean(System.getenv(\"INPUT_BOOLEAN\")); String inputList = System.getenv(\"INPUT_LIST\"); String inputPassword = System.getenv(\"INPUT_PASSWORD\"); Formula formula = new Formula( inputText, inputBoolean, inputList, inputPassword ); formula.Run(); } }  const INPUT1 = process.env.INPUT_TEXT const INPUT2 = process.env.INPUT_BOOLEAN const INPUT3 = process.env.INPUT_LIST const INPUT4 = process.env.INPUT_PASSWORD run(INPUT1, INPUT2, INPUT3, INPUT4)  input1 = os.environ.get(\"INPUT_TEXT\") input2 = os.environ.get(\"INPUT_BOOLEAN\") input3 = os.environ.get(\"INPUT_LIST\") input4 = os.environ.get(\"INPUT_PASSWORD\") formula.Run(input1, input2, input3, input4)  //Inputs are not even necessary here, as Shellscript get values from local variables directly. runFormula '$SAMPLE_TEXT' $SAMPLE_LIST '$SAMPLE_BOOL''$SAMPLE_PASSWORD'  ","excerpt":" What is the main file? The main file is used to extract the inputs …","language":"content/en","ref":"/formulas/extract-input-variables-in-a-formula/","title":"Extract input variables in a formula"},{"body":" O que é um arquivo main? O arquivo Main é usado para extrair os parâmetros de entrada informados no arquivo config.json, salvos como variáveis locais.\n Os parâmetros de entrada são extraídos pelo nome do campo informado no arquivo config.json em letras maiúsculas.   Esse arquivo é também onde estão as funções da fórmula, manipulando parâmetros de entrada, que são chamados para realizar uma operação e/ou automação da fórmula.\nExemplos de arquivo Main Nos exemplos abaixo, sempre há a classe de uma formula com uma função Run():\nmain.go Main.java index.js main.py main.sh input2 := os.Getenv(\"INPUT_LIST\") input3, _ := strconv.ParseBool(os.Getenv(\"INPUT_BOOLEAN\")) input4 := os.Getenv(\"INPUT_PASSWORD\") formula.Formula{ Text: input1, List: input2, Boolean: input3, Password: input4, }.Run(os.Stdout) }  public class Main { public static void main(String[] args) { String inputText = System.getenv(\"INPUT_TEXT\"); boolean inputBoolean = Boolean.parseBoolean(System.getenv(\"INPUT_BOOLEAN\")); String inputList = System.getenv(\"INPUT_LIST\"); String inputPassword = System.getenv(\"INPUT_PASSWORD\"); Formula formula = new Formula( inputText, inputBoolean, inputList, inputPassword ); formula.Run(); } }  const INPUT1 = process.env.INPUT_TEXT const INPUT2 = process.env.INPUT_BOOLEAN const INPUT3 = process.env.INPUT_LIST const INPUT4 = process.env.INPUT_PASSWORD run(INPUT1, INPUT2, INPUT3, INPUT4)  input1 = os.environ.get(\"INPUT_TEXT\") input2 = os.environ.get(\"INPUT_BOOLEAN\") input3 = os.environ.get(\"INPUT_LIST\") input4 = os.environ.get(\"INPUT_PASSWORD\") formula.Run(input1, input2, input3, input4)  //Inputs are not even necessary here, as Shellscript get values from local variables directly. runFormula '$SAMPLE_TEXT' $SAMPLE_LIST '$SAMPLE_BOOL''$SAMPLE_PASSWORD'  ","excerpt":" O que é um arquivo main? O arquivo Main é usado para extrair os …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/arquivo-main/","title":"Extrair input variables em uma fórmula"},{"body":" How to add formula dependencies? Each programming language has its own specificities to import libraries or packages.  On Ritchie, it’s possible to configure each formula as an independent and small project.\nTherefore, it will be possible to import all the necessary dependencies to perform the operations you want to implement. See more below:\ngo.mod (GOLANG) pom.xml (JAVA) package.json (NODE) requirements.txt (PYTHON) composer.json (PHP) module formula go 1.14 require ( github.com/gookit/color v1.2.5 )  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ecom.ritchie\u003c/groupId\u003e \u003cartifactId\u003eformula\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cproperties\u003e \u003cjava.version\u003e1.8\u003c/java.version\u003e \u003cmaven.compiler.source\u003e${java.version}\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e${java.version}\u003c/maven.compiler.target\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cmaven-jar-plugin.version\u003e3.2.0\u003c/maven-jar-plugin.version\u003e \u003c/properties\u003e \u003cbuild\u003e \u003cfinalName\u003eMain\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cversion\u003e3.8.1\u003c/version\u003e \u003cconfiguration\u003e \u003csource\u003e1.8\u003c/source\u003e \u003ctarget\u003e1.8\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003c!-- Build an executable JAR --\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-jar-plugin\u003c/artifactId\u003e \u003cversion\u003e${maven-jar-plugin.version}\u003c/version\u003e \u003cconfiguration\u003e \u003carchive\u003e \u003cmanifest\u003e \u003c!-- \u003caddClasspath\u003etrue\u003c/addClasspath\u003e --\u003e \u003cmainClass\u003ecom.ritchie.Main\u003c/mainClass\u003e \u003c/manifest\u003e \u003c/archive\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-assembly-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cappendAssemblyId\u003efalse\u003c/appendAssemblyId\u003e \u003carchive\u003e \u003cmanifest\u003e \u003cmainClass\u003ecom.ritchie.Main\u003c/mainClass\u003e \u003c/manifest\u003e \u003c/archive\u003e \u003cdescriptorRefs\u003e \u003cdescriptorRef\u003ejar-with-dependencies\u003c/descriptorRef\u003e \u003c/descriptorRefs\u003e \u003c/configuration\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cid\u003emake-assembly\u003c/id\u003e \u003cphase\u003epackage\u003c/phase\u003e \u003cgoals\u003e \u003cgoal\u003esingle\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ejunit\u003c/groupId\u003e \u003cartifactId\u003ejunit\u003c/artifactId\u003e \u003cversion\u003e4.13.1\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.github.tomas-langer\u003c/groupId\u003e \u003cartifactId\u003echalk\u003c/artifactId\u003e \u003cversion\u003e1.0.2\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/project\u003e  { \"dependencies\": { \"cli-color\": \"^2.0.0\" }, \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"version\": \"1.0.0\" }  colored==1.4.2  { \"require\": { \"codedungeon/php-cli-colors\": \"~1.0\" } }  ","excerpt":" How to add formula dependencies? Each programming language has its …","language":"content/en","ref":"/formulas/add-formula-dependencies/","title":"Add formula dependencies"},{"body":" Como adicionar as dependências de fórmula? Cada linguagem de programação possui suas próprias especificidades para importar bibliotecas ou pacotes.  No Ritchie, é possível configurar cada fórmula como um projeto pequeno e independente.\nPortanto, você pode importar todas as dependências necessárias para performar as operações que você deseja implementar. Veja mais abaixo:\ngo.mod (GOLANG) pom.xml (JAVA) package.json (NODE) requirements.txt (PYTHON) composer.json (PHP) module formula go 1.14 require ( github.com/gookit/color v1.2.5 )  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ecom.ritchie\u003c/groupId\u003e \u003cartifactId\u003eformula\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cproperties\u003e \u003cjava.version\u003e1.8\u003c/java.version\u003e \u003cmaven.compiler.source\u003e${java.version}\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e${java.version}\u003c/maven.compiler.target\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cmaven-jar-plugin.version\u003e3.2.0\u003c/maven-jar-plugin.version\u003e \u003c/properties\u003e \u003cbuild\u003e \u003cfinalName\u003eMain\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cversion\u003e3.8.1\u003c/version\u003e \u003cconfiguration\u003e \u003csource\u003e1.8\u003c/source\u003e \u003ctarget\u003e1.8\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003c!-- Build an executable JAR --\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-jar-plugin\u003c/artifactId\u003e \u003cversion\u003e${maven-jar-plugin.version}\u003c/version\u003e \u003cconfiguration\u003e \u003carchive\u003e \u003cmanifest\u003e \u003c!-- \u003caddClasspath\u003etrue\u003c/addClasspath\u003e --\u003e \u003cmainClass\u003ecom.ritchie.Main\u003c/mainClass\u003e \u003c/manifest\u003e \u003c/archive\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-assembly-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cappendAssemblyId\u003efalse\u003c/appendAssemblyId\u003e \u003carchive\u003e \u003cmanifest\u003e \u003cmainClass\u003ecom.ritchie.Main\u003c/mainClass\u003e \u003c/manifest\u003e \u003c/archive\u003e \u003cdescriptorRefs\u003e \u003cdescriptorRef\u003ejar-with-dependencies\u003c/descriptorRef\u003e \u003c/descriptorRefs\u003e \u003c/configuration\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cid\u003emake-assembly\u003c/id\u003e \u003cphase\u003epackage\u003c/phase\u003e \u003cgoals\u003e \u003cgoal\u003esingle\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ejunit\u003c/groupId\u003e \u003cartifactId\u003ejunit\u003c/artifactId\u003e \u003cversion\u003e4.13.1\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.github.tomas-langer\u003c/groupId\u003e \u003cartifactId\u003echalk\u003c/artifactId\u003e \u003cversion\u003e1.0.2\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/project\u003e  { \"dependencies\": { \"cli-color\": \"^2.0.0\" }, \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"version\": \"1.0.0\" }  colored==1.4.2  { \"require\": { \"codedungeon/php-cli-colors\": \"~1.0\" } }  ","excerpt":" Como adicionar as dependências de fórmula? Cada linguagem de …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/depend%C3%AAncias/","title":"Adicionar as dependências de fórmula"},{"body":" This functionality is no longer available from Ritchie’s 2.5.0 version. From now on, a formula build is automatically made on your CLI: a local repo file will be created as soon as you implement the formula to host it.\nIf you’re using a previous version just follow the instructions of this section.\n How to build? After creating a formula, if you want to edit the code of the formula, it’s necessary to build these changes to test the command with the new implementation.\nTo do so, run the command:\nrit build formula You must inform:\n The directory’s path where the formula is located. The formula’s path to be builded (the formula’s command).  If you want to update the formula’s code in running time, you can use the flag “–watch” like in the command below:\nrit build formula --watch ","excerpt":" This functionality is no longer available from Ritchie’s 2.5.0 …","language":"content/en","ref":"/formulas/build-formulas/","title":"Build formulas"},{"body":" Essa funcionalidade não está mais disponível a partir da versão 2.5.0 do Ritchie. Isso porque o build da fórmula é feito de maneira automática: um repositório local criado assim que você implementa a fórmula\nCaso esteja usando uma versão anterior, basta seguir as orientações desta seção.\n Como “buildar”? Depois de criar uma fórmula, e se você quiser editar o código dela, será necessário fazer o build dessas alterações para testar o comando com a nova implementação.\nPara isso, execute o comando:\nrit build formula Você deverá informar:\n O caminho do diretório onde a fórmula está localizada. O caminho da fórmula a ser buildada (ele segue o comando da fórmula).  Se você quiser atualizar o código da fórmula em tempo de execução, é possível utilizar a flag “–watch” junto da fórmula. Veja o exemplo abaixo:\nrit build formula --watch ","excerpt":" Essa funcionalidade não está mais disponível a partir da versão 2.5.0 …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/buildar-f%C3%B3rmulas/","title":"Buildar fórmulas"},{"body":" What is the difference between workspace and repository? Repositories and workspaces are used to interact with formulas on Ritchie, but the way they work is different, check out:\n  workspace You can use workspace commands to develop, edit and test formulas locally.\n  repository You can use repository commands to import formulas from Git repositories and execute them.\n   See an example to add a repository on the Hello World Formula page.  Commands for repos and workspaces are similar, they allow the CLI to “see” available formulas on your local machine. Workspaces have higher priority than Repos, for example, if you use both commands for the same formulas' repositories, the workspaces' formulas will be executed.\nFor more information about workspace and repositories commands, check out the list of commands and flags.\nHow to add? Follow the next steps:\nStep 1: Run this command:\nrit add workspace Step 2: Enter the requested input:\n 1: Inform the workspace name (don’t use spaces or special characters). 2: Inform the workspace path on the local machine.  How to list? To list avalaible workspaces, you just have to run this command:\nrit list workspace How to update? If you’re not the only person updating the workspace (e.g: if it’s a cloned repository from Git) you may need to update the workspace to allow the CLI to “see” the newly available formulas or updates on your local machine after pulling the code.\nTo update a workspace, run this command:\nrit update workspace After that, select the workspace name and wait for the CLI output message:\nHow to delete? To delete a workspace, run the command below:\nrit delete workspace After that, follow the next steps:\nStep 1: Select the workspace name;\nStep 2: Confirm you want to delete the workspace.\nLearn More  Check out all the available formulas on Ritchie in the list of commands and flags.  ","excerpt":" What is the difference between workspace and repository? Repositories …","language":"content/en","ref":"/formulas/workspaces/","title":"Workspaces"},{"body":" Qual a diferença entre workspace e repositório? Repositórios e workspaces são usados para interagir com as fórmulas no Ritchie, mas em situações diferentes, veja abaixo:\n  workspace: Você pode usar os comandos do workspace para desenvolver, editar e testar fórmulas locais.\n  repository: Você pode usar o repositório para fazer o download de fórmulas de repositórios Git e usá-las.\n   Veja um exemplo de adição de repositório na página Executar uma fórmula Hello World.  Os comandos para repos e workspaces são similares, eles permitem que o CLI ‘veja’ as fórmulas disponíveis. Os workspaces possuem prioridade mais alta que os Repos, se você usar, por exemplo, os dois comandos para os mesmos repositórios de fórmulas, os workspaces serão executados.\nPara mais informações sobre os comandos de workspace e repositórios, veja a lista de comandos e flags.\nComo adicionar? Siga os passos para adicionar:\nPasso 1: Execute o comando abaixo para adicionar um novo workspace:\nrit add workspace Passo 2: Informe alguns parâmetros de entrada antes da sua execução:\n 1: Informe o nome do workspace (não use espaços ou caracteres especiais). 2: Informe o caminho (path) do workspace na sua máquina local.  Como listar? Execute o comando abaixo para listar os workspaces da máquina:\nrit list workspace Como atualizar? Se você não é a única pessoa trabalhando em um workspace (por exemplo: se for um repositório clonado do Git), é necessário atualizar o workspace para permitir que a CLI “veja” as novas fórmulas ou atualizações disponíveis na sua máquina local, após fazer o pull o código.\nPara atualizar um espaço de trabalho, execute o comando abaixo:\nrit update workspace Depois disso, selecione o nome do workspace e aguarde a mensagem de saída do CLI:\nComo apagar? Para excluir um workspace, execute o comando:\nrit delete workspace Depois disso, siga os passos:\nPasso 1: Selecione o workspace;\nPasso 2: Confirme que você deseja excluir o workspace:\nAprenda Mais  Conheça a lista de comandos de fórmulas disponíveis no Ritchie.  ","excerpt":" Qual a diferença entre workspace e repositório? Repositórios e …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/workspaces/","title":"Workspaces"},{"body":" How to rename a formula? Premisses Only local formulas can be renamed.  Renaming your formula You can use the core command rit rename formula to rename a local formula. The required input parameters are:\n The name of the old formula; The new formula name; The workspace name.   Example: rit group old \u003e rit group new \u003e Default   Ritchie will automatically identify the workspace to which the formula belongs to. If the CLI identify more than one workspace with the entered formula, an extra step (when using prompt execution) will be necessary to identify in which workspace the formula should have its name changed. This formula includes entry via flag.  For more information, check out the Formula commands section.  Effects   All files that identify the formula will be changed to the new formula name. These changes reflect both in Ritchie’s internal control folders and in the workspace folder (whether it is the default or custom).\n  Ritchie’s autocompleted will only identify the new formula name.\n  Next steps Keep configuring your formula:\n👉 Check out how to share formulas.\n","excerpt":" How to rename a formula? Premisses Only local formulas can be …","language":"content/en","ref":"/formulas/rename-formulas/","title":"Rename formulas"},{"body":" Como renomear uma fórmula? Premissas Somente fórmulas locais podem ser renomeadas.  Renomeando sua fórmula Você pode usar o comando core do Ritchie rit rename formula para renomear uma fórmula local. Os parâmetros de entrada necessários são:\n O nome da fórmula antiga; O novo nome da fórmula; O nome do workspace.   Exemplo: rit group old \u003e rit group new \u003e Default   O Ritchie identifica automaticamente o workspace que a fórmula pertence. Se o CLI identificar mais de um workspace com a fórmula informada, um passo extra necessário (quando for usada a execução via prompt) será pedido pelo Ritchie, para escolher o workspace que deve ter a fórmula renomeada. Essa fórmula possui entrada via flags.  Para mais informações, veja a seção Comandos de fórmula. .  Efeitos   Todos os arquivos que identificam a fórmula serão alterados para o novo nome da fórmula. Essas alterações refletirão tanto nas pastas internas de controle do Ritchie, quanto na pasta do workspace (sendo ele o default ou personalizado).\n  O autocomplete do Ritchie identificará somente o novo nome de fórmula.\n  Próximos passos Continue configurando a sua fórmula:\n👉 Veja a seção como compartilhar fórmulas.\n","excerpt":" Como renomear uma fórmula? Premissas Somente fórmulas locais podem …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/renomear-f%C3%B3rmulas/","title":"Renomear fórmulas"},{"body":" Como publicar? Existe uma fórmula no Ritchie que permite você criar/atualizar o repositório de fórmulas no Github e/ou Gitlab.\nPremissas Para publicar um repositório, é necessário configurar as credenciais do Github e/ou Gitlab usando o comando rit set credential.  Publicando seu repositório Você pode usar uma fórmula que foi criada no repositório da comunidade para fazer:\n Inicializar em um repositório local do Git (se necessário). Criar repositório no Github e/ou Gitlab. Gerar a release de uma nova versão do repositório. Adicionar um repositório nos repositórios locais do Ritchie (usando o comando rit add repo).  Além disso, se o repositório já existir, a fórmula irá fazer o commit de um novo código e gerar uma nova release informada antes de atualizar os repositórios do Ritchie (usando o comando rit update repo)  rit publish repo Você deverá informar 5 tipos diferentes de parâmetros de entrada:\n O provedor (Github ou Gitlab). A privacidade do repositório. O nome do repositório. O caminho local do repositório que você quer publicar. A versão da release para ser gerada.  Você pode checar se a publicação deu certo usando o comando rit list repo e observando se o repositório publicado aparece.  Publicando manualmente Para publicar uma fórmula manualmente, você precisa submetê-la no repositório do Github e/ou Gitlab seguindo esses passos:\n Você precisa de um repositório de fórmulas exclusivo no Github e/ou Gitlab. Ele pode ser criado a partir de um repositório local ou de um repositório clonado. Adicione sua fórmula ao repositório. Para isso, use o comando rit create formula ou copie /cole as pastas. Faça o commit e submeta o novo código ao repositório do Github e/ou Gitlab. Gere uma nova release do repositório de fórmulas.  Próximos passos Continue configurando a sua fórmula:\n👉 Veja a seção como compartilhar fórmulas.\n","excerpt":" Como publicar? Existe uma fórmula no Ritchie que permite você …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/publicar-f%C3%B3rmulas/","title":"Publicar fórmulas"},{"body":" How to publish? There is a formula on Ritchie that allows the user to create and/or update a formula repository on Github/Gitlab.\nPremisses To publish your formula, make sure to set Github / Gitlab credentials using the rit set credential command.  Publish your repository A formula has been created on the community repository to perform:\n Initialize a local repository on Git (if necessary). Create the repository on Github/Gitlab. Generate release of a new version of the repository. Add the repository to Ritchie local repositories (rit add repo command).  Moreover, if the repository already exists, it will commit the new code and generate the new release version informed, before updating Ritchie repositories ( rit update repo command).  rit publish repo The user has to inform 5 different kinds of inputs:\n The provider (Github or Gitlab). The repository's privacy. The repository's name. The local repository path you wish to publish. The release version to generate.  You can check if the publication has been successful by using the rit list repo command and see if the published repository appears.  Publish manually To publish a formula manually, you need to push it on a Github/Gitlab repository, following these steps:\n You need to aave an exclusive repository for formulas on Github / Gitlab. It can be created from the a local repository, or based on a cloned repository. Add your formulas to the repository Using the rit create formula command, or copy / paste folders Commit and push the new code to the Github/Gitlab repository. Generate a new release of the formulas repository.  Next steps Keep configuring your formula:\n👉 Check out how to share formulas.\n","excerpt":" How to publish? There is a formula on Ritchie that allows the user to …","language":"content/en","ref":"/formulas/publish-formulas/","title":"Publish formulas"},{"body":" Como compartilhar? Depois que o repositório de fórmulas for publicado, outros usuários podem adicionar suas fórmulas localmente a partir da URL de acesso a elas.\nExemplo: https://github.com/ZupIT/ritchie-formulas\nPara adicionar um novo repositório no Ritchie, é necessário rodar o comando abaixo:\nrit add repo Uma vez que o repositório for adicionado, o Ritchie irá usar a versão da release selecionada do repositório para acessar as fórmulas disponíveis.\nSe o repositório de fórmulas for privado, será necessário informar o token do seu Github/Gitlab.  Como checar a última versão do repositório? Essa feature está disponível a partir da versão 2.2 do Ritchie.  No Ritchie, é possível checar novos comandos de fórmulas adicionados e checar se há uma nova versão de algum repositório que você tenha importado localmente. Siga os próximos passos:\nPasso 1. Executar o comando de ajuda rit --help. O sistema deve retornar a lista com grupo de repositórios disponíveis.\n(new version 2.12.1) commons repo commands: beagle Beagle commands bitbucket Manage bitbucket objects clean-swift Manage clean-swift objects docker Manipulate Docker objects git Manipulate Git objects github Manipulate GitHub objects gitlab Manipulate GitLab objects istio Istio Service Mesh commands jupyter Manage jupyter objects kafka Kafka commands kubernetes Manipulate kubernetes objects publish Publish command scaffold Manipulate scaffold objects xcode Manage xcode objects Passo 2. Se preferir, execute o comando rit list repo, que retorna informações dos repositórios importados, como a versão atual e a última versão disponível.\nComo encontrar fórmulas de um repositório? Essa feature está disponível a partir da versão 2.11 do Ritchie.  Quando você trabalha com vários grupos de fórmulas, pode ser difícil lembrar de cada comando disponível.\nSe você quiser listar as fórmulas de um repositório específico, siga os passos abaixo:\n Execute o comando de lista rit list formula. O sistema deve retornar a lista com o grupo de repositórios diponíveis e também a opção ‘ALL':  ? Repository: ALL \u003e repo-name-1 repo-name-2 Selecione o repositório que você deseja (ou ALL para todos) e o sistema retorna uma lista com os comandos e uma breve descrição que foi definida no arquivo help.json de cada fórmula:  ? Repository: repo-name-1 COMMAND DESCRIPTION rit aws add terraform-eks Generate terraform AWS eks rit aws add terraform-vpc Generate terraform AWS vpc rit aws apply terraform Apply terraform on AWS rit aws clean bucket Clean bucket AWS rit aws create bucket Create bucket AWS rit aws delete bucket Delete AWS objects There are 6 formulas Como eu posso atualizar? Para atualizar a versão de algum repositório local, você só precisa rodar o comando abaixo informando o nome do repositório e a versão desejada:\nrit update repo Próximos passos Nesta seção, você viu como compartilhar uma fórmula no Ritchie. Para continuar configurando sua fórmula:\n👉 Vá para página definir credenciais e veja como rodar esse comando com suas fórmulas.\n👉 Vá para página de lista de comandos para ver as automações disponíveis no repositório da nossa comunidade.\n","excerpt":" Como compartilhar? Depois que o repositório de fórmulas for …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/compartilhar-f%C3%B3rmulas/","title":"Compartilhar fórmulas"},{"body":" How to share? Once a formula repository has been published, other users can add it locally from its URL to access its formulas.\nExample: https://github.com/ZupIT/ritchie-formulas\nTo add a new repository on Ritchie, it is necessary to run the command:\nrit add repo Once the repository has been added, Ritchie will use the selected release on the repository to access the available formulas.\nIf the formula repository is private, the user will have to inform his Github/Gitlab token.  How to see the repo latest version? This feature is available from Ritchie 2.2 version.  On Ritchie, you can check out new formula commands and if there is a new version of some repository you added locally. Follow these steps:\nStep 1. Run the help command rit --help. The system will return a list with the group of available repositories.\n(new version 2.12.1) commons repo commands: beagle Beagle commands bitbucket Manage bitbucket objects clean-swift Manage clean-swift objects docker Manipulate Docker objects git Manipulate Git objects github Manipulate GitHub objects gitlab Manipulate GitLab objects istio Istio Service Mesh commands jupyter Manage jupyter objects kafka Kafka commands kubernetes Manipulate kubernetes objects publish Publish command scaffold Manipulate scaffold objects xcode Manage xcode objects Step 2. If you prefer, run the rit list repo command, that returns informations about the imported repositories, like the current version and the last available version.\nHow to see the repo formulas? This feature is available from Ritchie 2.11 version.  When you work with various formula groups, it may be hard to remember all the available commands.\nIf you want to list formulas from a specific repository, follow the steps below:\n Run the list command  rit list formula. The system will return a list with the available groups of repositories and the ‘ALL’ option.  ? Repository: ALL \u003e repo-name-1 repo-name-2 Select the repository you want (or ALL), the system will return a list with the commands and a description defined on the help.json of each formula.  ? Repository: repo-name-1 COMMAND DESCRIPTION rit aws add terraform-eks Generate terraform AWS eks rit aws add terraform-vpc Generate terraform AWS vpc rit aws apply terraform Apply terraform on AWS rit aws clean bucket Clean bucket AWS rit aws create bucket Create bucket AWS rit aws delete bucket Delete AWS objects There are 6 formulas How can I update? To update the version of any repository, you have to run the command below informing the repository and the version you wish to be updated:\nrit update repo Next steps Keep configuring your formula:\n👉 Check out how to use credentials with your formulas.\n👉 Check out our list of commands to see the available automations on our community repo.\n","excerpt":" How to share? Once a formula repository has been published, other …","language":"content/en","ref":"/formulas/share-formulas/","title":"Share formulas"},{"body":" Como apagar? Para apagar uma fórmula, você precisa rodar o seguinte comando:\nrit delete formula Feito isso, siga os passos:\nPasso 1: Selecione o workspace em que está a fórmula que deseja apagar.\nPasso 2: Selecione a fórmula que será apagada.\nPasso 3: O Ritchie fará uma pergunta para você confirmar se deseja seguir com a operação de apagar a fórmula. Basta selecionar “sim” (yes).\nAprenda Mais   Veja como encapsular fórmulas para descobrir como se executa uma fórmula dentro de outra fórmula.\n  Conheça a lista de comandos de fórmulas disponíveis no Ritchie.\n  ","excerpt":" Como apagar? Para apagar uma fórmula, você precisa rodar o seguinte …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/apagar-f%C3%B3rmulas/","title":"Apagar fórmulas"},{"body":" How to delete? To delete a formula, you have to run this command:\nrit delete formula Once you’ve made this, follow the steps:\nStep 1: Select the workspace where is the formula you want to delete.\nStep 2: Select the formula to be deleted.\nStep 3: The Ritchie will ask you to confirm if you wish to continue the operation to delete the formula. Just select the answer “yes”.\nLearn More On this section, you saw how to delete a formula on Ritchie. To keep learning:\n👉 Go to how to group formulas section to find out how to run a formula inside another formula.\n👉 Check out all the available formulas on Ritchie in the list of commands and flags.\n","excerpt":" How to delete? To delete a formula, you have to run this command:\nrit …","language":"content/en","ref":"/formulas/delete-formulas/","title":"Delete formulas"},{"body":" O que é encapsulamento? No Ritchie, é possível executar fórmulas dentro de fórmulas. Esse processo é chamado de Encapsulamento de Fórmula.\nEssa função permite que você, por exemplo, realize operações em que é necessário rodar fórmulas consecutivas.\nA seguir, veja como você pode fazer esse processo de encapsulamento:\nComo encapsular? 1. Premissa Para realizar um encapsulamento de fórmula, é necessário usar Standard Inputs. Para mais informações, veja a seção de Standard Inputs.\n2. Execução Ao implementar uma fórmula, você precisa pegar o arquivo onde a operação está codificada e executar a linha de comando associada à fórmula encapsulada.\nA linha de comando da fórmula encapsulada deve ser executada utilizando Standard Inputs e informando os seus parâmetros de entradas diretamente no código.\n3. Exemplo A fórmula rit publish repo foi implementada usando o encapsulamento de fórmula. Inclusive, você pode encontrar no Github a implementação dessa fórmula\nNo exemplo abaixo, você verá como esse encapsulamento funciona na parte do código usando Input flags.\n Essa fórmula foi implementada usando Shell, mas o raciocínio é o mesmo para qualquer outra linguagem de programação.   runFormula() { if [ \"Github\" == $PROVIDER ] then echo \"🐙 Github provider selected\" rit github publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION elif [ \"Gitlab\" == $PROVIDER ] then echo \"🦊 Gitlab provider selected\" rit gitlab publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION else echo \"🤖 Unexpected Provider informed. Check it please and try again.\" fi } De acordo com a entrada informada pelo usuário, duas fórmulas diferentes podem ser executadas:\n rit github publish repo rit gitlab publish repo  Para tanto, os parâmetros de entrada das fórmulas encapsuladas são informados dinamicamente de acordo com os parâmetros de entrada da fórmula principal (rit publish repo).\nDependendo da operação, os inputs flags do comando podem ser gerados de acordo com outras operações realizadas durante a execução da fórmula principal, antes de executar a linha de comando da fórmula encapsulada.\nAprenda Mais  Veja os tutoriais que criamos para você praticar as diversas funcionalidades do Ritchie. Veja a lista de comandos para ver as automações disponíveis no repositório da nossa comunidade.  ","excerpt":" O que é encapsulamento? No Ritchie, é possível executar fórmulas …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/encapsular-f%C3%B3rmulas/","title":"Encapsular fórmulas"},{"body":" What is an aggregation? On Ritchie, it is possible to run formulas inside formulas. This process is called Formula aggregation‌.\nThis functionality allows you, for example, to make operations in which you need to run consecutive formulas.\nCheck out on the following topics to understand how works this aggregation.\nHow to group? 1. Premisse To group formulas, it is necessary to use Standard Inputs. For more information, check out the Standard Inputs section.\n2. Execution When implementing a formula, the file where the operation is coded needs to execute a command line associated to a formula.‌\nThe grouped formula command line needs to be executed using Standard Inputs, which means informing the inputs parameters directly on the code.‌\n3. Example The rit publish repo formula has been implemented using formula aggregation, that you can find its formula implementation.\nOn the example below, you’ll find below how this aggregation works on the code part, using Input flags.\n This formula has been implemented using Shell and the reasoning would be the same for any other programming language.   runFormula() { if [ \"Github\" == $PROVIDER ] then echo \"🐙 Github provider selected\" rit github publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION elif [ \"Gitlab\" == $PROVIDER ] then echo \"🦊 Gitlab provider selected\" rit gitlab publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION else echo \"🤖 Unexpected Provider informed. Check it please and try again.\" fi } Here, according to the input informed by the user, two different formulas can be executed:‌\n rit github publish repo rit gitlab publish repo  To do so, the grouped formulas inputs parameters are informed dynamically according to the inputs parameters of the main formula (rit publish repo).\nDepending on the operation, the input flags used for the command could be generated according to other operations performed through the formula execution before executing the grouped formula command line.‌\nLearn More   Check out the tutorials page to apply all Ritchie’s concepts you have learned.‌\n  Check out our list of commands to see the available automations on our community repository.\n  ","excerpt":" What is an aggregation? On Ritchie, it is possible to run formulas …","language":"content/en","ref":"/formulas/group-formulas/","title":"Group formulas"},{"body":" Unit Tests In Ritchie CLI context, Unit tests are the way of testing a part of your formula implementation.\nSome of the formula templates - Java and Golang - currently have a Test class to write and run the formula unit tests.\nYou can also configure your CI/CD and release processes to run those tests after each formula update or addition.\nFunctional Tests Using Github Actions Ritchie’s team recently developed a Github action to test CLI commands outputs. Check the Github repository test-cli-commands-action.\nRitchie CLI uses this action to make sure the CLI core commands behave as expected after updating the files related to them.\nHow does this action work? When you use this action, you can check different implementation scenarios through the formulas outputs, according to the formulas inputs. You can run the tests only when you update a file from the formula directory.\nFor more information about actions, check out the Github Marketplace page or the How to test formulas tutorial.\n","excerpt":" Unit Tests In Ritchie CLI context, Unit tests are the way of testing …","language":"content/en","ref":"/formulas/test-formula/","title":"Test formulas"},{"body":" Testes unitários No contexto do Ritchie CLI, teste unitário é a forma de testar uma parte da implementação da sua fórmula.\nAlguns templates de fórmula, como Java e Golang, possuem classe de testes para escrever e rodar testes unitários das fórmulas.\nVocê também pode configurar seu CI/CD e os processos de release para rodar esses testes, logo após a adição ou atualização de uma fórmula.\nTestes funcionais Usando Github Actions O time do Ritchie desenvolveu um Github action para testar comandos de output da CLI. Veja o repositório test-cli-commands-action.\nRitchie CLI utiliza essa ação para ter certeza, que os comandos core da CLI se comportem como esperado, depois que os arquivos relacionados são atualizados.\nComo essa ação funciona? Quando você usa essa ação, você consegue checar diferentes cenários da implementação por meio de outputs de fórmulas, de acordo com os inputs das fórmulas. Você pode testar somente quando o arquivo do diretório de fórmulas estiver atualizado.\nPara mais informações sobre actions, veja a página do Github Marketplace ou o tutorial Como testar fórmulas.\n","excerpt":" Testes unitários No contexto do Ritchie CLI, teste unitário é a forma …","language":"content/pt-br","ref":"/pt-br/f%C3%B3rmulas/testar-formulas/","title":"Testar formulas"},{"body":" ","excerpt":" ","language":"content/pt-br","ref":"/pt-br/credenciais/","title":"Credenciais"},{"body":" ","excerpt":" ","language":"content/en","ref":"/credentials/","title":"Credentials"},{"body":" Você pode definir as credenciais do Ritchie para não precisar informar os mesmos dados diversas vezes no terminal.\nPara fazer isso, rode o comando abaixo:\nrit set credential O terminal irá retornar essa mensagem:\n? Select your provider [Use arrows to move, type to filter] \u003e kubeconfig ansible aws github gitlab jenkins Add a new Depois que você escolheu um dos provedores disponíveis, o Ritchie irá solicitar que você preencha os seguintes campos:\n? Select your provider github ? username: DennisRitchie ? email: dennis.ritchie@zup.com.br ? token: ✔ Github credential saved!  Para saber mais sobre os arquivos editáveis das fórmulas e como manipular as credenciais definidas na sessão como parâmetros de input das fórmulas (no caso, inputs no config.json), veja a seção de Fórmulas.  ","excerpt":" Você pode definir as credenciais do Ritchie para não precisar …","language":"content/pt-br","ref":"/pt-br/credenciais/definir-credenciais/","title":"Definir credenciais"},{"body":" You have to set Ritchie’s credentials to avoid inform data multiples times through the terminal.\nTo do so, run the following command:\nrit set credential The terminal will return this message:\n? Select your provider [Use arrows to move, type to filter] \u003e kubeconfig ansible aws github gitlab jenkins Add a new After you chose one of the available providers, Ritchie will ask you to fill the following fields:\n? Select your provider github ? username: DennisRitchie ? email: dennis.ritchie@zup.com.br ? token: ✔ Github credential saved!  For more information about the formula’s editable files and to see how to manipulate the credentials defined in the session as formula input parameters (inputs in the config.json file), check out the Formulas section.  ","excerpt":" You have to set Ritchie’s credentials to avoid inform data multiples …","language":"content/en","ref":"/credentials/set-credentials/","title":"Set credentials"},{"body":" Como apagar? Para deletar uma credencial, você precisa rodar o seguinte comando:\nrit delete credential Veja abaixo como o processo funciona:\nLeia mais   Como adicionar provedores  e, assim, continuar configurando suas credenciais.\n  Lista de comandos de fórmulas disponíveis no Ritchie.\n  ","excerpt":" Como apagar? Para deletar uma credencial, você precisa rodar o …","language":"content/pt-br","ref":"/pt-br/credenciais/apagar-credenciais/","title":"Apagar credenciais"},{"body":" How to delete? To delete a credential, you have to run this command:\nrit delete credential Check out below how the process works:\nRead more   How to add providers to keep configuring your credentials?\n  List of commands and flags available on Ritchie.\n  ","excerpt":" How to delete? To delete a credential, you have to run this command: …","language":"content/en","ref":"/credentials/delete-credentials/","title":"Delete credentials"},{"body":" You can configure Ritchie to add new providers on your workspace.\nTo do that:\n Choose “Add a new” option when running the rit set credential command:  ? Select your provider Add a new ? Define your provider name: Provider_Name ? Define your field name: (ex.:token, secretAccessKey) token ? Select your field type: secret ? Add more credentials to this provider? no ? token: * ✔ Provider_Name credential saved! The informations that will be requested are:\n Provider name: Name of the new provider. You name it according to your preference. Field name: Name of a credential from this provider. Field type: Value type of this credential. It can be: plain text or secret.  After this configuration, you set up this credentials following the same instructions above.\nThis provider, as well as its informations, will be permanently saved on Ritchie. You can also add as much providers as you want.  ","excerpt":" You can configure Ritchie to add new providers on your workspace.\nTo …","language":"content/en","ref":"/credentials/add-providers/","title":"Add providers"},{"body":" É possível configurar o Ritchie para adicionar novos provedores no seu espaço de trabalho.\nPara fazer isso:\n Selecione a opção “Add a new” rodando o comando rit set credential:  ? Select your provider Add a new ? Define your provider name: Provider_Name ? Define your field name: (ex.:token, secretAccessKey) token ? Select your field type: secret ? Add more credentials to this provider? no ? token: * ✔ Provider_Name credential saved! As informações que o Ritchie solicita são:\n Provider name: Nome do novo provedor. Você pode nomear de acordo com sua preferência. Field name: Nome da credencial que está nesse provedor. Field type: Tipo de valor dessa credencial. Ele pode ser: plain text ou secret.  Ao terminar essa configuração, você pode configurar as credenciais seguindo as instruções acima.\nEsse provedor, assim como as suas informações, serão salvas de forma permanente no Ritchie. No entanto, você pode adicionar quantos provedores quiser.  ","excerpt":" É possível configurar o Ritchie para adicionar novos provedores no …","language":"content/pt-br","ref":"/pt-br/credenciais/adicionar-provedores/","title":"Adicionar provedores"},{"body":" Depois de configurar as credenciais do provedor, você pode usá-la como parâmetro de entrada para o arquivo config.json das suas fórmulas.\nComo configurar? Para fazer isso, use a palavra-chave reservada: CREDENTIAL\nQuando usada como parâmetro de entrada, a credencial terá 2 campos:\n Name: Variável usada para extrair o parâmetro e manipulá-lo dentro do código da fórmula. Type: Nomenclatura específica para o CLI saber qual credencial usar.  O tipo precisa respeitar o seguinte padrão: CREDENTIAL_PROVIDER_VARIABLE  Por exemplo, para usar as credenciais do GITHUB como parâmetros, você precisa informá-las no arquivo config.json da fórmula:\n\"inputs\": [ { \"name\": \"git_user\", \"type\": \"CREDENTIAL_GITHUB_USERNAME\" }, { \"name\": \"git_email\", \"type\": \"CREDENTIAL_GITHUB_EMAIL\" }, { \"name\": \"git_token\", \"type\": \"CREDENTIAL_GITHUB_TOKEN\" } ] Se você tem alguma dúvida com os nomes dos provedores, você pode checar a lista de credenciais que você já configurou usando o comando abaixo:\nrit list credential Com GITHUB, o terminal irá retornar uma resposta como essa:\nPROVIDER\tCONTEXT\tCREDENTIAL github default\t{\"token\":\"***\", \"email\":\"***\", \"username\":\"***\"} Aprenda Mais Para mais informações sobre as automações disponíveis no repositório da nossa comunidade, veja a lista de comandos.\n","excerpt":" Depois de configurar as credenciais do provedor, você pode usá-la …","language":"content/pt-br","ref":"/pt-br/credenciais/usar-credenciais-como-par%C3%A2metros-de-entrada/","title":"Usar credenciais como parâmetros de entrada"},{"body":" After a provider’s credential has been set, it can be used as input in the formula’s **config.json**file.\nHow can you configure? To do so, it is necessary to use the reserved keyword: CREDENTIAL\nWhen the credential is used as an input, it will contain 2 fields:\n The name is the variable used to extract the input and manipulate it inside the formula’s code. The type is the specific nomenclature for the CLI to now which credential to use.  The type needs to respect the following pattern: CREDENTIAL_PROVIDER_VARIABLE  For example, to be able to use GITHUB credentials as input, you need to inform them as follows in the formula’s config.json file:\n\"inputs\": [ { \"name\": \"git_user\", \"type\": \"CREDENTIAL_GITHUB_USERNAME\" }, { \"name\": \"git_email\", \"type\": \"CREDENTIAL_GITHUB_EMAIL\" }, { \"name\": \"git_token\", \"type\": \"CREDENTIAL_GITHUB_TOKEN\" } ] If you have any questions regarding the provider’s variable names, you can check the credentials you’ve set using the following command:\nrit list credential With GITHUB, it will return something like this:\nPROVIDER\tCONTEXT\tCREDENTIAL github default\t{\"token\":\"***\", \"email\":\"***\", \"username\":\"***\"} Learn More For more information about the available automations on our community repository, check out the commands list.\n","excerpt":" After a provider’s credential has been set, it can be used as input …","language":"content/en","ref":"/credentials/use-credentials-as-formula-inputs/","title":"Use credentials as formula inputs"},{"body":"","excerpt":"","language":"content/en","ref":"/standard-inputs/","title":"Standard Inputs"},{"body":"","excerpt":"","language":"content/pt-br","ref":"/pt-br/flag-stdin/","title":"Flag stdin"},{"body":" When you inform inputs through arguments or flags allows you to automate workflows.\nThis is useful when you manipulate other tools within a script, as you can automate operations without interacting with the terminal.\nHow can you inform the input parameters? Basically, there are two ways to inform input parameters directly on the command lines:\n Through the STDIN flag . (will be deprecated in early 2021) Through Input flags.  For more information about them, check out the following sections:\n Input flags. STDIN flags.  ","excerpt":" When you inform inputs through arguments or flags allows you to …","language":"content/en","ref":"/standard-inputs/overview/","title":"Overview"},{"body":" The STDIN flag will be deprecated in early 2021, as substituted by input flags.  The --stdin flag on Ritchie has been developed to inform input parameters directly on the command lines.\nIn that case, the input parameters need to be informed in a JSON format:\necho'{\"key\":\"value\"}'|RIT (GROUP) VERB NOUN --stdin\nYou can use this stdin flag rules on:\n👉 Core Commands.\n👉 Formulas Commands.\n","excerpt":" The STDIN flag will be deprecated in early 2021, as substituted by …","language":"content/en","ref":"/stdin-flag/stdin-flag-overview/","title":"Overview"},{"body":"","excerpt":"","language":"content/en","ref":"/stdin-flag/","title":"Stdin flag"},{"body":" A flag –stdin será descontinuada no início de 2021, sendo substituída pelos input flags.  A flag --stdin no Ritchie foram desenvolvidas para oferecer mais uma opção para quem usa os parâmetros de entrada por meio de linha de comando.\nNesse caso, os parâmetros de entrada devem ser informados em um formato JSON:\necho'{\"key\":\"value\"}'|RIT (GROUP) VERB NOUN --stdin\nVocê pode usar essas regras da flag stdin em:\n👉 Comandos Core.\n👉 Comandos de fórmulas.\n","excerpt":" A flag –stdin será descontinuada no início de 2021, sendo substituída …","language":"content/pt-br","ref":"/pt-br/flag-stdin/visao-geral/","title":"Visão Geral"},{"body":" Informar os parâmetros de entrada por meio de argumentos ou flags permite que você automatize workflows.\nIsso é útil quando você manipular outras ferramentas dentro do script, assim você automatiza operações sem precisar interagir com o terminal.\nComo informar os parâmetros de entrada? Há duas formas de informar os parâmetros de entrada diretamente na linha de comando:\n Por meio da flag STDIN; (será depreciado no início de 2021); Por meio de Input flags.  Para mais informações sobre cada um deles, veja as seguintes seções:\n Input flags. STDIN flags.  ","excerpt":" Informar os parâmetros de entrada por meio de argumentos ou flags …","language":"content/pt-br","ref":"/pt-br/standard-inputs/visao-geral/","title":"Visão Geral"},{"body":" Comandos Core com STDIN Aqui está o JSON usado para executar os comandos core do Ritchie através do stdin.\nSerá necessário adaptar o valor das variáveis para cada JSON retornar os resultados esperados nas operações.  Comandos gerais rit init\necho '{\"addCommons\":true, \"sendMetrics\":true, \"runType\":\"local\"}' | rit init --stdin rit tutorial\necho '{\"tutorial\":\"enabled\"}' | rit tutorial --stdin Comandos do Repo rit add repo\necho '{\"provider\":\"Github\", \"name\":\"repoName\", \"repoU\":\"https://github.com/ZupIT/ritchie-formulas\", \"token\": null, \"priority\":1, \"tag\"=\"2.2.0\"}' | rit add repo --stdin rit update repo\necho '{\"name\":\"repoName\", \"tag\":\"2.2.0\"}' | rit update repo --stdin rit delete repo\necho '{\"name\":\"repoName\"}' | rit delete repo --stdin Comandos de fórmula rit create formula\necho '{\"formula\":\"rit demo create formula\", \"lang\":\"shell\", \"workspacePath\":\"/users/dennis/home/ritchie-formulas\", \"formulaPath\":\"/demo/create/formula\"}' | rit create formula --stdin rit build formula\nSem suporte ainda  Comandos de Ambiente rit set env\necho '{\"env\":\"envName\"}' | rit set env --stdin rit delete env\necho '{\"env\":\"envName\"}' | rit delete env --stdin Comandos de Credenciais rit set credential\necho '{\"service\":\"provider\", \"type\":\"type\", \"credential\": {\"username\":\"credentialUserna rit delete credential\necho '{\"provider\":\"provider\"}' | rit delete credential --stdin Comandos Core sem STDIN Alguns comandos core não precisam da flag stdin para serem executados. Isso acontece porque, nesse caso, eles não precisam informar nenhum parâmetro de entrada:\n rit upgrade rit --version rit completion rit list repo rit list credential rit show env  ","excerpt":" Comandos Core com STDIN Aqui está o JSON usado para executar os …","language":"content/pt-br","ref":"/pt-br/flag-stdin/comandos-core/","title":"Comandos Core"},{"body":" Core commands with STDIN Here are the JSON used to run Ritchie’s core commands through stdin.\nYou will have to adapt the variable values of each JSON to perform the desired operations as expected.  General commands rit init\necho '{\"addCommons\":true, \"sendMetrics\":true, \"runType\":\"local\"}' | rit init --stdin rit tutorial\necho '{\"tutorial\":\"enabled\"}' | rit tutorial --stdin Repo commands rit add repo\necho '{\"provider\":\"Github\", \"name\":\"repoName\", \"repoUrl\":\"https://github.com/ZupIT/ritchie-formulas\", \"token\": null, \"priority\":1, \"tag\"=\"2.2.0\"}' | rit add repo --stdin rit update repo\necho '{\"name\":\"repoName\", \"tag\":\"2.2.0\"}' | rit update repo --stdin rit delete repo\necho '{\"name\":\"repoName\"}' | rit delete repo --stdin Formula commands rit create formula\necho '{\"formula\":\"rit demo create formula\", \"lang\":\"shell\", \"workspacePath\":\"/users/dennis/home/ritchie-formulas\", \"formulaPath\":\"/demo/create/formula\"}' | rit create formula --stdin rit build formula\nNot supported yet  Environment commands rit set env\necho '{\"env\":\"envName\"}' | rit set env --stdin rit delete env\necho '{\"env\":\"envName\"}' | rit delete env --stdin Credential commands rit set credential\necho '{\"service\":\"provider\", \"type\":\"type\", \"credential\": {\"username\":\"credentialUsername\",\"token\": \"credentialToken\"}}' | rit set credential --stdin rit delete credential\necho '{\"provider\":\"provider\"}' | rit delete credential --stdin Core commands without STDIN Some core commands don’t need the stdin flag to be executed as they don’t have any input parameter to inform:\n rit upgrade rit --version rit completion rit list repo rit list credential rit show env  ","excerpt":" Core commands with STDIN Here are the JSON used to run Ritchie’s core …","language":"content/en","ref":"/stdin-flag/stdinflag-core-commands/","title":"Core commands"},{"body":" Com as fórmulas, o ID do JSON com a flag STDIN tem como base os nomes dos parâmetros de entrada que são informados no arquivo config.json no momento de implementar uma fórmula.\nExemplo   Comando de fórmula: rit demo formula\n  Nomes dos parâmetros de entrada que são perguntados pelo arquivo config.json:\n name surname dateOfBirth    Execução da fórmula com STDIN:\n  echo '{\"name\":\"Dennis\", \"surname\":\"Ritchie\", \"dateOfBirth\":\"09/09/1941\"}' | rit demo formula --stdin  O comando de fórmula, por meio do stdin, precisa dos parâmetros de entrada que são colocados no config.json para funcionar corretamente.\nSe, durante a implementação da fórmula, for demandada uma informação via prompt, não será possível usar exclusivamente o stdin para fórmula ser executada com sucesso.\n ","excerpt":" Com as fórmulas, o ID do JSON com a flag STDIN tem como base os nomes …","language":"content/pt-br","ref":"/pt-br/flag-stdin/comandos-de-f%C3%B3rmulas/","title":"Comandos de fórmulas"},{"body":" With the formulas, the STDIN flag JSON’s ID is based on the inputs parameters names informed on the config.json file used to implement the formula.\nExample   Formula command: rit demo formula\n  Inputs names asked in the config.json file:\n name surname dateOfBirth    Formula execution with STDIN:\n  echo '{\"name\":\"Dennis\", \"surname\":\"Ritchie\", \"dateOfBirth\":\"09/09/1941\"}' | rit demo formula --stdin  The formula’s command through stdin will need the input parameters based on the config.json to work properly.\nIf the formula’s implementation asks for data via prompt, it will not be possible to exclusively use stdin for the formula to run successfully.\n ","excerpt":" With the formulas, the STDIN flag JSON’s ID is based on the inputs …","language":"content/en","ref":"/stdin-flag/stdin-flag-formulas-commands/","title":"Formulas commands"},{"body":" The Input flags on Ritchie has been developed to give one more option to use input parameters through command lines.\nTherefore, the input parameters need to be informed in the following pattern:\nRIT (GROUP) VERB NOUN --input_name=\"input_value\"   For more information about Input Flags, check out the Formulas commands section.\n","excerpt":" The Input flags on Ritchie has been developed to give one more option …","language":"content/en","ref":"/standard-inputs/input-flag/","title":"Input Flags"},{"body":" Os Input flags foram desenvolvidos para oferecer mais uma opção para a entrada de valores via comando de linha no Ritchie.\nSendo assim, os valores devem ser informados no seguinte padrão:\nRIT (GROUP) VERB NOUN --input_name=\"input_value\"   Para mais informações sobre Inputs flags, veja a seção Comandos de fórmulas.\n","excerpt":" Os Input flags foram desenvolvidos para oferecer mais uma opção para …","language":"content/pt-br","ref":"/pt-br/standard-inputs/input-flag/","title":"Input Flags"},{"body":"","excerpt":"","language":"content/pt-br","ref":"/pt-br/standard-inputs/","title":"Standard Inputs"},{"body":" Core Commands com input flags Estas flags estão disponíveis a partir da versão 2.8 do Ritchie.  Flags disponíveis Comando de inicialização do Ritchie rit init\nrit init --sendMetrics=\"yes\" --addCommons=\"yes\" --runType=\"local\" Comando para criar fórmula rit create formula\nrit create formula --name=\"rit group verb noun\" --language=\"go\" --workspace=\"Default\" Comandos de credenciais rit set credential\nrit set credential --provider=\"github\" --fields=\"username,token\" --values=\"Dennis,123456\" rit delete credential\nrit delete credential --provider=\"github\" Comandos de Ambiente rit set env\nrit set env --env=\"prod\" rit delete env\nrit delete env --env=\"prod\" Comandos de Fórmulas rit set formula-runner\nrit set formula-runner --runner=\"local\" rit list formula\nrit list formula --name=\"repo_name\"  Se você precisar listar as fórmulas de todos os repositórios adicionados, use a flag ‘ALL’.  rit list formula --name=\"ALL\" rit rename formula\nrit rename formula --oldName=\"rit group old\" --newName=\"rit group new\" --workspace=\"workspace_name\"  A flag de workspace é obrigatória quando a fórmula é encontrada em mais de um workspace.  rit delete formula\nrit delete formula --workspace=\"workspace_name\" --formula=\"rit group verb noun\" Comandos de Repo rit add repo\nrit add repo --name=\"demo\" --provider=\"Github\" --repoUrl=\"https://github.com/ZupIT/ritchie-formulas-demo\" --tag=\"2.8.9\" --token=\"1324efg\"  Quando a flag de versão não é passada, o Ritchie busca automaticamente a última versão. A flag de token é obrigatória quando o comando é usado para adicionar um repositório privado.  rit delete repo\nrit delete repo --name=\"repo_name\" rit update repo\nrit update repo --name=\"commons\" --version=\"2.0.0\" Comando de Tutorial rit tutorial\nrit tutorial --enabled=true Comandos de workspace rit add workspace\nrit add workspace --name=\"workspace_name\" --path=\"path/to/workspace\" rit delete workspace\nrit delete workspace --name=\"workspace_name\" rit update workspace\nrit update workspace --name=\"workspace_name\" ","excerpt":" Core Commands com input flags Estas flags estão disponíveis a partir …","language":"content/pt-br","ref":"/pt-br/standard-inputs/comandos-core/","title":"Comandos Core"},{"body":" Core Commands with input flags This flags are supported since Ritchie’s 2.8 release.  Available flags Init command rit init\nrit init --sendMetrics=\"yes\" --addCommons=\"yes\" --runType=\"local\" Create formula command rit create formula\nrit create formula --name=\"rit group verb noun\" --language=\"go\" --workspace=\"Default\" Credentials command rit set credential\nrit set credential --provider=\"github\" --fields=\"username,token\" --values=\"Dennis,123456\" rit delete credential\nrit delete credential --provider=\"github\" Environment commands rit set env\nrit set env --env=\"prod\" rit delete env\nrit delete env --env=\"prod\" Formula commands rit set formula-runner\nrit set formula-runner --runner=\"local\" rit list formula\nrit list formula --name=\"repo_name\"  If you need to list formulas from every repository you have added, use the flag ‘ALL’.  rit list formula --name=\"ALL\" rit rename formula\nrit rename formula --oldName=\"rit group old\" --newName=\"rit group new\" --workspace=\"workspace_name\"  The workspace flag is required when the formula is found in more than one workspace.  rit delete formula\nrit delete formula --workspace=\"workspace_name\" --formula=\"rit group verb noun\" Repo commands rit add repo\nrit add repo --name=\"demo\" --provider=\"Github\" --repoUrl=\"https://github.com/ZupIT/ritchie-formulas-demo\" --tag=\"2.8.9\" --token=\"1324efg\"  When the version flag is not passed, Ritchie automatically searches for the latest version. The token flag is mandatory when the command is used to add a private repository.  rit delete repo\nrit delete repo --name=\"repo_name\" rit update repo\nrit update repo --name=\"commons\" --version=\"2.0.0\" Tutorial command rit tutorial\nrit tutorial --enabled=true Workspace commands rit add workspace\nrit add workspace --name=\"workspace_name\" --path=\"path/to/workspace\" rit delete workspace\nrit delete workspace --name=\"workspace_name\" rit update workspace\nrit update workspace --name=\"workspace_name\" ","excerpt":" Core Commands with input flags This flags are supported since …","language":"content/en","ref":"/standard-inputs/core-commands/","title":"Core Commands"},{"body":" As Input flags, com as fórmulas, tem como base os nomes dos parâmetros de entrada. Eles são informados no arquivo config.json no momento de implementar uma fórmula.\nExemplo   Comando de fórmula: rit demo formula\n  Nomes dos parâmetros de entrada que são perguntados pelo arquivo config.json:\n name surname dateOfBirth    Execução da fórmula com Input flags:\n  rit demo formula --name=\"dennis\" --surname=\"ritchie\" --dateOfBirth=\"09/09/1941\"  O comando de fórmula, por meio do input flags, precisa dos parâmetros de entrada colocados no config.json para funcionar corretamente.  ","excerpt":" As Input flags, com as fórmulas, tem como base os nomes dos …","language":"content/pt-br","ref":"/pt-br/standard-inputs/comandos-de-f%C3%B3rmulas/","title":"Comandos de fórmulas"},{"body":" The Input flags with formulas are based on the inputs parameters names. They are informed in the config.json file used to implement the formula.\nExample   Formula command: rit demo formula\n  Inputs names asked in the config.json file:\n name surname dateOfBirth    Formula execution with input flags:\n  rit demo formula --name=\"dennis\" --surname=\"ritchie\" --dateOfBirth=\"09/09/1941\"  The formula’s command through Input flags needs the input parameters based on the config.json to work properly.  ","excerpt":" The Input flags with formulas are based on the inputs parameters …","language":"content/en","ref":"/standard-inputs/formulas-commands/","title":"Formulas commands"},{"body":"Essa seção orienta você na criação de fórmulas em diferente níveis e com isso mostrar as diversas atividades que você pode fazer usando o Ritchie.\nPré-requisitos Para realizar os tutoriais, você precisa entender os alguns conceitos:\n Como executar fórmulas Como criar fórmulas Como “buildar” fórmulas Como encapsular formulas  Tutoriais Tutorial 1: Nível básico: Como manipular inputs básicos?\nTutorial 2: Nível básico 2: Como manipular inputs de credenciais do Github?\nTutorial 3: Nível intermediário: Como manipular os inputs condicionais?\nTutorial 4: Nível avançado: Como aplicar o conceito de agrupamento de fórmulas?\n","excerpt":"Essa seção orienta você na criação de fórmulas em diferente níveis e …","language":"content/pt-br","ref":"/pt-br/tutoriais/o-que-sao-tutoriais/","title":"O que são os tutoriais?"},{"body":"This section guides you to create formulas in different levels and with that show you lots of activities you can do with Richie.\nPrerequisites To perform the tutorials here, you will need to know more about the following concepts:\n How to run formulas. How to create formulas. How to build formulas. How to group formulas.  Tutorials Tutorial 1: Basic level: How to manipulate basic inputs?\nTutorial 2: Basic level 2: How to manipulate GitHub credentials inputs?\nTutorial 3: Intermediate: How to manipulate conditional inputs?\nTutorial 4: Advanced: How to apply the formula aggregation concept?\n","excerpt":"This section guides you to create formulas in different levels and …","language":"content/en","ref":"/tutorials/what-are-these-tutorials/","title":"What are these tutorials?"},{"body":"","excerpt":"","language":"content/pt-br","ref":"/pt-br/tutoriais/","title":"Tutoriais"},{"body":"","excerpt":"","language":"content/en","ref":"/tutorials/","title":"Tutorials"},{"body":"Neste tutorial, a ideia é ensinar você a criar uma fórmula simples que, neste caso, irá somar 2 números positivos.\nSugestão de comando: rit math sum numbers.  Parâmetros de entrada Essa fórmula deverá conter (pelo menos) os dois parâmetros de entrada. Veja como abaixo:\n Number one (RIT_NUMBER_ONE). Number two (RIT_NUMBER_TWO).  Como fazer isso? Essa parte é comum para todas as linguagens de programação.  Procure pelo arquivo config.json da sua fórmula e substitua o campo inputs pelo bloco abaixo:\n{ \"label\": \"Number one : \", \"name\": \"rit_number_one\", \"type\": \"text\" }, { \"label\": \"Number two : \", \"name\": \"rit_number_two\", \"type\": \"text\" } ] Passo a Passo Siga os passos abaixo para criar a sua fórmula:\nPasso 1: Extrair os parâmetros de entrada Procure pelo arquivo main da sua fórmula e extraia os parâmetros de entrada antes de usá-los para chamar o método da fórmula. Veja abaixo alguns exemplos de códigos:\nPython Java Golang Node import os from formula import formula number_one = int(os.environ.get(\"RIT_NUMBER_ONE\")) number_two = int(os.environ.get(\"RIT_NUMBER_TWO\")) formula.run(number_one, number_two)  package com.ritchie; import com.ritchie.formula.Formula; public class Main { public static void main(String[] args) { String numberOne = System.getenv(\"RIT_NUMBER_ONE\"); String numberTwo = System.getenv(\"RIT_NUMBER_TWO\"); Formula formula = new Formula(Integer.valueOf(numberOne), Integer.valueOf(numberTwo)); System.out.println(formula.run()); } }  package main import ( \"formula/pkg/formula\" \"os\" \"strconv\" ) func main() { numberOne, _ := strconv.Atoi(os.Getenv(\"RIT_NUMBER_ONE\")) numberTwo, _ := strconv.Atoi(os.Getenv(\"RIT_NUMBER_TWO\")) formula.Formula{ NumberOne: numberOne, NumberTwo: numberTwo, }.Run() }  const run = require(\"./formula/formula\") const NUMBER_ONE = parseInt(process.env.RIT_NUMBER_ONE) const NUMBER_TWO = parseInt(process.env.RIT_NUMBER_TWO) run(NUMBER_ONE, NUMBER_TWO)  Observação: Aqui que é realizado a conversão de STRING para INT pois não existe o tipo INT nativo no arquivo config.json .\nEsse arquivo segue a nomenclatura main.* para a maioria das linguagens, exceto para o Node que chama index.js.  Passo 2: Implemente a operação da fórmula Procure pelo arquivo formula da sua fórmula e implemente o método realizando a operação da sua automação. Veja alguns exemplos de códigos:\nPython Java Golang Node def run(number_one, number_two): sum = number_one + number_two print(\"The sum is\", sum)  package com.ritchie.formula; public class Formula { private Integer numberOne; private Integer numberTwo; public String run() { Integer sum = numberOne + numberTwo; return String.format(\"The sum is %s\", sum); } public Formula(Integer numberOne, Integer numberTwo) { this.numberOne = numberOne; this.numberTwo = numberTwo; } public Integer getNumberOne() { return numberOne; } public void setNumberOne(Integer numberOne) { this.numberOne = numberOne; } public Integer getNumberTwo() { return numberTwo; } public void setNumberTwo(Integer numberTwo) { this.numberTwo = numberTwo; } }  package formula import ( \"fmt\" ) type Formula struct { NumberOne int NumberTwo int } func (f Formula) Run() { sum := f.NumberOne + f.NumberTwo fmt.Println(\"The sum is\", sum) }  function Run(numberOne, numberTwo) { var sum = numberOne + numberTwo console.log(\"The sum is \" + sum) } const formula = Run module.exports = formula  Passo 3: Teste a fórmula no terminal  Teste com prompt  ~ rit math sum numbers ? Number one : 1 ? Number two : 2 The sum is 3  Teste com input flags  ~ rit math sum numbers --rit_number_one=\"1\" --rit_number_two=\"2\" The sum is 3  Se você quiser incrementar essa fórmula, veja algumas sugestões abaixo:\n Adicione uma validação dos parâmetros de entrada para retornar um erro ao usuário se o parâmetro não for um inteiro. Permita que usuário some números negativos com positivos. Permita que o usuário digite números decimais.   Próximos passos 👉 Se você completou o primeiro tutorial, vá para o segundo Como usar credenciais do GitHub?.\n","excerpt":"Neste tutorial, a ideia é ensinar você a criar uma fórmula simples …","language":"content/pt-br","ref":"/pt-br/tutoriais/manipular-inputs/","title":"Como manipular inputs"},{"body":"This tutorials helps you to create a simple formula, in this case, it will sum two positive numbers.\nCommand suggestion: rit math sum numbers.  Inputs This formula must have (at least) two input parameters. See below:\n Number one (RIT_NUMBER_ONE). Number two (RIT_NUMBER_TWO).  How can you do that? This is the same for all programming languages.  Search for the config.json file of your formula and replace it the inputs field for the block below:\n{ \"label\": \"Number one : \", \"name\": \"rit_number_one\", \"type\": \"text\" }, { \"label\": \"Number two : \", \"name\": \"rit_number_two\", \"type\": \"text\" } ] Step by step Follow the steps below to create your formula:\nStep 1: Extract all inputs parameters Search for the main file of tour formula and extract all the inputs before using them to call your formula’s method. See some code example below:\nPython Java Golang Node import os from formula import formula number_one = int(os.environ.get(\"RIT_NUMBER_ONE\")) number_two = int(os.environ.get(\"RIT_NUMBER_TWO\")) formula.run(number_one, number_two)  package com.ritchie; import com.ritchie.formula.Formula; public class Main { public static void main(String[] args) { String numberOne = System.getenv(\"RIT_NUMBER_ONE\"); String numberTwo = System.getenv(\"RIT_NUMBER_TWO\"); Formula formula = new Formula(Integer.valueOf(numberOne), Integer.valueOf(numberTwo)); System.out.println(formula.run()); } }  package main import ( \"formula/pkg/formula\" \"os\" \"strconv\" ) func main() { numberOne, _ := strconv.Atoi(os.Getenv(\"RIT_NUMBER_ONE\")) numberTwo, _ := strconv.Atoi(os.Getenv(\"RIT_NUMBER_TWO\")) formula.Formula{ NumberOne: numberOne, NumberTwo: numberTwo, }.Run() }  const run = require(\"./formula/formula\") const NUMBER_ONE = parseInt(process.env.RIT_NUMBER_ONE) const NUMBER_TWO = parseInt(process.env.RIT_NUMBER_TWO) run(NUMBER_ONE, NUMBER_TWO)  Warning: Here is where the conversion from STRING to INT happens, because there is no native INT type in the config.json file.\nThis file follows the main.* nomenclature for most languages, except Node that it calls index.js.  Step 2: Implement the formula’s operation Search for the formula file of your formula and implement the method performing the operation of your automation. See some code examples:\nPython Java Golang Node def run(number_one, number_two): sum = number_one + number_two print(\"The sum is\", sum)  package com.ritchie.formula; public class Formula { private Integer numberOne; private Integer numberTwo; public String run() { Integer sum = numberOne + numberTwo; return String.format(\"The sum is %s\", sum); } public Formula(Integer numberOne, Integer numberTwo) { this.numberOne = numberOne; this.numberTwo = numberTwo; } public Integer getNumberOne() { return numberOne; } public void setNumberOne(Integer numberOne) { this.numberOne = numberOne; } public Integer getNumberTwo() { return numberTwo; } public void setNumberTwo(Integer numberTwo) { this.numberTwo = numberTwo; } }  package formula import ( \"fmt\" ) type Formula struct { NumberOne int NumberTwo int } func (f Formula) Run() { sum := f.NumberOne + f.NumberTwo fmt.Println(\"The sum is\", sum) }  function Run(numberOne, numberTwo) { var sum = numberOne + numberTwo console.log(\"The sum is \" + sum) } const formula = Run module.exports = formula  Step 3: Test the formula on your terminal  Test with prompt  ~ rit math sum numbers ? Number one : 1 ? Number two : 2 The sum is 3  Test with input flags  ~ rit math sum numbers --rit_number_one=\"1\" --rit_number_two=\"2\" The sum is 3  If you want to test your formula more, see some suggestions below:\n Add a validation of the input parameters to return an error to the user if the parameter is not an integer. Allow the user to sum negative numbers with positive ones. Allow the user to digit decimals in addition to integers.   Next steps 👉 If you’ve completed this first tutorial, let’s go to the second one How to use GitHub crendentials.\n","excerpt":"This tutorials helps you to create a simple formula, in this case, it …","language":"content/en","ref":"/tutorials/manipulate-inputs/","title":"How to manipulate inputs"},{"body":"Neste tutorial, a ideia é criar uma fórmula que vai retornar um JSON contendo as credenciais do Github.\nO tutorial configura os parâmetros de entrada dentro do arquivo config.json, mas executar a fórmula sem informá-los usando prompt ou stdin(serão extraídos automaticamente). Você encontrará todas as informações necessárias na seção de configurar inputs.\nSugestão de comando: rit github get user.  Parâmetros de entrada Essa fórmula deverá conter (pelo menos) três parâmetros de entrada. Veja como abaixo:\n Username (RIT_GITHUB_USER). Token (RIT_GITHUB_TOKEN). Email (RIT_GITHUB_EMAIL).  Como fazer isso? Essa parte é comum para todas as linguagens de programação.  Procure pelo arquivo config.json da sua fórmula e substitua o campo inputs pelo bloco abaixo:\n{ \"name\": \"rit_github_user\", \"type\": \"CREDENTIAL_GITHUB_USERNAME\" }, { \"name\": \"rit_github_token\", \"type\": \"CREDENTIAL_GITHUB_TOKEN\" }, { \"name\": \"rit_github_email\", \"type\": \"CREDENTIAL_GITHUB_EMAIL\" } ] Passo a Passo Siga os passos abaixo para criar a sua fórmula:\nPasso 1: Extrair os parâmetros de entrada Procure pelo arquivo main da sua fórmula e extraia os parâmetros de entrada antes de usá-los para chamar o método da fórmula. Veja abaixo alguns exemplos de códigos:\nPython Java Golang Node import os from formula import formula username = os.environ.get(\"RIT_GITHUB_USER\") token = os.environ.get(\"RIT_GITHUB_TOKEN\") email = os.environ.get(\"RIT_GITHUB_EMAIL\") formula.run(username, token, email)  package com.ritchie; import com.ritchie.formula.Formula; public class Main { public static void main(String[] args) { String username = System.getenv(\"RIT_GITHUB_USER\"); String token = System.getenv(\"RIT_GITHUB_TOKEN\"); String email = System.getenv(\"RIT_GITHUB_EMAIL\"); Formula formula = new Formula(username, token, email); System.out.println(formula.run()); } }  package main import ( \"formula/pkg/formula\" \"os\" ) func main() { username := os.Getenv(\"RIT_GITHUB_USER\") token := os.Getenv(\"RIT_GITHUB_TOKEN\") email := os.Getenv(\"RIT_GITHUB_TOKEN\") formula.Formula{ Username: username, Token: token, Email: email, }.Run() }  const run = require(\"./formula/formula\") const USERNAME = process.env.RIT_GITHUB_USER const TOKEN = process.env.RIT_GITHUB_TOKEN const EMAIL = process.env.RIT_GITHUB_EMAIL run(USERNAME, TOKEN, EMAIL)  Esse arquivo segue a nomenclatura main.* para a maioria das linguagens, exceto para o Node que chama index.js.  Passo 2: Implemente a operação da fórmula Procure pelo arquivo formula da sua fórmula e implemente o método realizando a operação da sua automação. Veja alguns exemplos de códigos:\nPython Java Golang Node import json class Github: username = 'username' token = 'token' email = 'email' def run(username, token, email): # Create object github = Github() github.username = username github.token = token github.email = email # Convert to JSON string github_json = json.dumps(github.__dict__) # Print json string print(github_json)  package com.ritchie.formula; import com.google.gson.*; # Add GSON dependency on POM.XML public class Formula { private String username; private String token; private String email; public String run() { Gson gson = new Gson(); return gson.toJson(this, Formula.class); } public Formula(String username, String token, String email) { this.username = username; this.token = token; this.email = email; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getToken() { return token; } public void setToken(String token) { this.token = token; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } }  package formula import ( \"bytes\" \"encoding/json\" \"log\" ) type Formula struct { Username string Token string Email string } func (h Formula) Run() { response, err := json.Marshal(h) if err != nil { log.Printf(\"Error\", h) } var prettyJSON bytes.Buffer error := json.Indent(\u0026prettyJSON, response, \"\", \"\\t\") if error != nil { log.Println(\"JSON parse error:\", error) } log.Println(\"Github Credentials:\", string(prettyJSON.Bytes())) }  function Run(username, token, email) { console.log(\"Credential Github\") console.log(\"username: \" + username) console.log(\"token: \" + token) console.log(\"email: \" + email) } const formula = Run module.exports = formula  Dependendo da linguagem, pode ser necessário adicionar algumas dependências nos arquivos relacionados (pom.xml para Java, requirements.txt para Python, package.json para Node, go.mod para Golang, etc).  Passo 3: Teste a fórmula no terminal  Teste sem credenciais configuradas  ~ rit github get user ? Provider key not found, please provide a value for github username: ****** ? Provider key not found, please provide a value for github token: ****** ? Provider key not found, please provide a value for github email: ****** {\"username\": \"Dennis\", \"token\": \"123456\", \"email\": \"dennis.ritchie@zup.com.br\"}  Teste com credenciais configuradas  ~ rit github get user {\"username\": \"Dennis\", \"token\": \"123456\", \"email\": \"dennis.ritchie@zup.com.br\"}  Se você quiser incrementar essa fórmula, veja algumas sugestões abaixo:\n Desenvolva alguma operação Github manipulando essas credenciais. Codifique uma fórmula que permitirá ao usuário criar um repositório no Github. Codifique uma fórmula que permitirá ao usuário fazer um add, commit e push usando apenas um comando. Codifique uma fórmula que permitirá ao usuário gerar uma release do repositório Github informado.   Próximos passos 👉 Se você completou o segundo tutorial, vá para o terceiro Como usar os inputs condicionais?.\n","excerpt":"Neste tutorial, a ideia é criar uma fórmula que vai retornar um JSON …","language":"content/pt-br","ref":"/pt-br/tutoriais/usar-credenciais/","title":"Como usar credenciais do GitHub"},{"body":"In this tutorial you will learn how to create a formula on Ritchie that will return a JSON with Github credentials.\nThe tutorial configures the inputs inside the config.json file, but run the formula without informing them as prompt or stdin (they will be extracted automatically). You’ll find more information in the input configuration section.\nCommand suggestion: rit github get user.  Inputs This formula must have (at least) three input parameters. See below:\n Username (RIT_GITHUB_USER). Token (RIT_GITHUB_TOKEN). Email (RIT_GITHUB_EMAIL).  How can you do that? This is the same for all programming languages.  Search for the config.json file of your formula and replace it the inputs field for the block below:\n{ \"name\": \"rit_github_user\", \"type\": \"CREDENTIAL_GITHUB_USERNAME\" }, { \"name\": \"rit_github_token\", \"type\": \"CREDENTIAL_GITHUB_TOKEN\" }, { \"name\": \"rit_github_email\", \"type\": \"CREDENTIAL_GITHUB_EMAIL\" } ] Step by step Follow the steps below to create your formula:\nStep 1: Extract all inputs parameters Search for the main file of tour formula and extract all the inputs before using them to call your formula’s method. See some code example below:\nPython Java Golang Node import os from formula import formula username = os.environ.get(\"RIT_GITHUB_USER\") token = os.environ.get(\"RIT_GITHUB_TOKEN\") email = os.environ.get(\"RIT_GITHUB_EMAIL\") formula.run(username, token, email)  package com.ritchie; import com.ritchie.formula.Formula; public class Main { public static void main(String[] args) { String username = System.getenv(\"RIT_GITHUB_USER\"); String token = System.getenv(\"RIT_GITHUB_TOKEN\"); String email = System.getenv(\"RIT_GITHUB_EMAIL\"); Formula formula = new Formula(username, token, email); System.out.println(formula.run()); } }  package main import ( \"formula/pkg/formula\" \"os\" ) func main() { username := os.Getenv(\"RIT_GITHUB_USER\") token := os.Getenv(\"RIT_GITHUB_TOKEN\") email := os.Getenv(\"RIT_GITHUB_TOKEN\") formula.Formula{ Username: username, Token: token, Email: email, }.Run() }  const run = require(\"./formula/formula\") const USERNAME = process.env.RIT_GITHUB_USER const TOKEN = process.env.RIT_GITHUB_TOKEN const EMAIL = process.env.RIT_GITHUB_EMAIL run(USERNAME, TOKEN, EMAIL)  This file follows the main.* nomenclature for most languages, except Node that it calls index.js.  Step 2: Implement the formula’s operation Search for the formula file of your formula and implement the method performing the operation of your automation. See some code examples:\nPython Java Golang Node import json class Github: username = 'username' token = 'token' email = 'email' def run(username, token, email): # Create object github = Github() github.username = username github.token = token github.email = email # Convert to JSON string github_json = json.dumps(github.__dict__) # Print json string print(github_json)  package com.ritchie.formula; import com.google.gson.*; # Add GSON dependency on POM.XML public class Formula { private String username; private String token; private String email; public String run() { Gson gson = new Gson(); return gson.toJson(this, Formula.class); } public Formula(String username, String token, String email) { this.username = username; this.token = token; this.email = email; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getToken() { return token; } public void setToken(String token) { this.token = token; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } }  package formula import ( \"bytes\" \"encoding/json\" \"log\" ) type Formula struct { Username string Token string Email string } func (h Formula) Run() { response, err := json.Marshal(h) if err != nil { log.Printf(\"Error\", h) } var prettyJSON bytes.Buffer error := json.Indent(\u0026prettyJSON, response, \"\", \"\\t\") if error != nil { log.Println(\"JSON parse error:\", error) } log.Println(\"Github Credentials:\", string(prettyJSON.Bytes())) }  function Run(username, token, email) { console.log(\"Credential Github\") console.log(\"username: \" + username) console.log(\"token: \" + token) console.log(\"email: \" + email) } const formula = Run module.exports = formula  Depending on the language, it can be necessary add some dependencies in the related files (pom.xml for Java, requirements.txt for Python, package.json for Node, go.mod for Golang, etc).  Step 3: Test the formula on your terminal  Test without configured credentials  ~ rit github get user ? Provider key not found, please provide a value for github username: ****** ? Provider key not found, please provide a value for github token: ****** ? Provider key not found, please provide a value for github email: ****** {\"username\": \"Dennis\", \"token\": \"123456\", \"email\": \"dennis.ritchie@zup.com.br\"}  Test with configured credentials  ~ rit github get user {\"username\": \"Dennis\", \"token\": \"123456\", \"email\": \"dennis.ritchie@zup.com.br\"}  If you want to test your formula more, see some suggestions below:\n Develop some Github operation by manipulating these credentials. Code a formula which will allow the user to create a repository on Github. Code a formula which will allow the user to add, commit and push using only one command. Code a formula which will allow the user to generate a release of the informed Github repository.   Next steps 👉 If you’ve completed the second tutorial, go to the third How to use conditional inputs.\n","excerpt":"In this tutorial you will learn how to create a formula on Ritchie …","language":"content/en","ref":"/tutorials/use-github-credentials/","title":"How to use GitHub credentials"},{"body":"Neste tutorial, a ideia é criar uma fórmula que vai retornar a ferramenta selecionada pelo usuário de acordo com seu perfil.\n Veja mais informações na seção sobre o arquivo config.json.\n Sugestão de comando: rit get tools.  Parâmetros de entrada Essa fórmula deverá conter (pelo menos) três parâmetros de entrada. Veja como abaixo:\n Name (RIT_NAME). Profile (RIT_PROFILE). Profile tool (RIT_TOOL).  Os parâmetros de entrada da fórmula precisam seguir o diagrama abaixo:\nComo fazer isso? Essa parte é comum para todas as linguagens de programação.  Procure pelo arquivo config.json da sua fórmula e substitua o campo inputs pelo bloco abaixo:\n{ \"label\": \"Type the professional name: \", \"name\": \"rit_name\", \"type\": \"text\", \"cache\": { \"active\": true, \"newLabel\": \"Type other name: \", \"qty\": 3 } }, { \"label\": \"Select the professional profile: \", \"name\": \"rit_profile\", \"type\": \"text\", \"items\": [ \"BACK-END\", \"FRONT-END\", \"OPERATION\", \"QA\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"BACK-END\" }, \"label\": \"Which tool this BACK-END professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"INTELLIJ\", \"DATAGRIP\", \"DOCKER\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"FRONT-END\" }, \"label\": \"Which tool this FRONT-END professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"ATOM\", \"CHROME DEV TOOLS\", \"NPM\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"OPERATION\" }, \"label\": \"Which tool this OPERATION professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"JENKINS\", \"CIRCLE-CI\", \"TERRAFORM\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"QA\" }, \"label\": \"Which tool this QA professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"SELENIUM\", \"POSTMAN\", \"CUCUMBER\" ] } ] Passo a Passo Siga os passos abaixo para criar a sua fórmula:\nPasso 1: Extrair os parâmetros de entrada Procure pelo arquivo main da sua fórmula e extraia os parâmetros de entrada antes de usá-los para chamar o método da fórmula. Veja abaixo alguns exemplos de códigos:\nPython Java import os from formula import formula name = os.environ.get(\"RIT_NAME\") profile = os.environ.get(\"RIT_PROFILE\") tool = os.environ.get(\"RIT_TOOL\") formula.run(profile, tool)  package com.ritchie; import com.ritchie.formula.Formula; public class Main { public static void main(String[] args) { String username = System.getenv(\"RIT_GIT_USER\"); String token = System.getenv(\"RIT_GIT_TOKEN\"); String email = System.getenv(\"RIT_GIT_EMAIL\"); Formula formula = new Formula(username, token, email); System.out.println(formula.run()); } }  Esse arquivo segue a nomenclatura main.* para a maioria das linguagens, exceto para o Node que chama index.js.  Passo 2: Implemente a operação da fórmula Procure pelo arquivo formula da sua fórmula e implemente o método realizando a operação da sua automação. Veja alguns exemplos de códigos:\nPython Java def run(name, profile, tool): printf(\"Welcome to {name}\") printf(\"He is our new {profile} professional.\") printf(\"Ritchie will install {tool} for him automatically.\")  package com.ritchie.formula; import com.google.gson.*; # Add GSON dependency on POM.XML public class Formula { private String username; private String token; private String email; public String run() { Gson gson = new Gson(); return gson.toJson(this, Formula.class); } public Formula(String username, String token, String email) { this.username = username; this.token = token; this.email = email; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getToken() { return token; } public void setToken(String token) { this.token = token; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } }  Dependendo da linguagem, pode ser necessário adicionar algumas dependências nos arquivos relacionados (pom.xml para Java, requirements.txt para Python, package.json para Node, go.mod para Golang, etc).  Passo 3: Teste a fórmula no terminal  Teste com prompt  ~ rit get tools ? Type the professional name: Dennis ? Select the professional profile: BACK-END ? Which tool this BACK-END professional needs to install: DOCKER Welcome to Dennis He is our new BACK-END professional. Ritchie will install DOCKER for him automatically.  Teste com input flags  ~ rit get tools --rit_name=\"Dennis\" --rit_profile=\"BACK-END\" --rit_tool=\"DOCKER\" Welcome to Dennis He is our new BACK-END professional. Ritchie will install DOCKER for him automatically.  Se você quiser incrementar essa fórmula, veja a sugestão abaixo:\n Instale a ferramenta selecionada de acordo com o SO do computador.   Próximos passos 👉 Se você completou o terceiro tutorial, vamos para o quarto Como agrupar uma fórmula?.\n","excerpt":"Neste tutorial, a ideia é criar uma fórmula que vai retornar a …","language":"content/pt-br","ref":"/pt-br/tutoriais/usar-inputs-condicionais/","title":"Como usar inputs condicionais"},{"body":"Here, the idea is to create a formula on Ritchie that will return the tool selected by the user according to its profile.\n You’ll find more information about the conditional field on the config.json inputs section.\n Command suggestion: rit get tools.  Inputs This formula must have (at least) three input parameters. See below:\n Name (RIT_NAME). Profile (RIT_PROFILE). Profile tool (RIT_TOOL).  The formula inputs must follow the diagram below:\nHow can you do that? This is the same for all programming languages.  Search for the config.json file of your formula and replace it the inputs field for the block below:\n{ \"label\": \"Type the professional name: \", \"name\": \"rit_name\", \"type\": \"text\", \"cache\": { \"active\": true, \"newLabel\": \"Type other name: \", \"qty\": 3 } }, { \"label\": \"Select the professional profile: \", \"name\": \"rit_profile\", \"type\": \"text\", \"items\": [ \"BACK-END\", \"FRONT-END\", \"OPERATION\", \"QA\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"BACK-END\" }, \"label\": \"Which tool this BACK-END professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"INTELLIJ\", \"DATAGRIP\", \"DOCKER\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"FRONT-END\" }, \"label\": \"Which tool this FRONT-END professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"ATOM\", \"CHROME DEV TOOLS\", \"NPM\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"OPERATION\" }, \"label\": \"Which tool this OPERATION professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"JENKINS\", \"CIRCLE-CI\", \"TERRAFORM\" ] }, { \"condition\": { \"variable\":\"rit_profile\", \"operator\":\"==\", \"value\":\"QA\" }, \"label\": \"Which tool this QA professional needs to install: \", \"name\": \"rit_tool\", \"type\": \"text\", \"items\": [ \"SELENIUM\", \"POSTMAN\", \"CUCUMBER\" ] } ] Step by step Follow the steps below to create your formula:\nStep 1: Extract all inputs parameters Search for the main file of tour formula and extract all the inputs before using them to call your formula’s method. See some code example below:\nPython Java import os from formula import formula name = os.environ.get(\"RIT_NAME\") profile = os.environ.get(\"RIT_PROFILE\") tool = os.environ.get(\"RIT_TOOL\") formula.run(profile, tool)  package com.ritchie; import com.ritchie.formula.Formula; public class Main { public static void main(String[] args) { String username = System.getenv(\"RIT_GIT_USER\"); String token = System.getenv(\"RIT_GIT_TOKEN\"); String email = System.getenv(\"RIT_GIT_EMAIL\"); Formula formula = new Formula(username, token, email); System.out.println(formula.run()); } }  This file follows the main.* nomenclature for most languages, except Node that it calls index.js.  Step 2: Implement the formula’s operation Search for the formula file of your formula and implement the method performing the operation of your automation. See some code examples:\nPython Java def run(name, profile, tool): printf(\"Welcome to {name}\") printf(\"He is our new {profile} professional.\") printf(\"Ritchie will install {tool} for him automatically.\")  package com.ritchie.formula; import com.google.gson.*; # Add GSON dependency on POM.XML public class Formula { private String username; private String token; private String email; public String run() { Gson gson = new Gson(); return gson.toJson(this, Formula.class); } public Formula(String username, String token, String email) { this.username = username; this.token = token; this.email = email; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getToken() { return token; } public void setToken(String token) { this.token = token; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } }  Depending on the language, it can be necessary add some dependencies in the related files (pom.xml for Java, requirements.txt for Python, package.json for Node, go.mod for Golang, etc).  Step 3: Test the formula on your terminal  Test with prompt  ~ rit get tools ? Type the professional name: Dennis ? Select the professional profile: BACK-END ? Which tool this BACK-END professional needs to install: DOCKER Welcome to Dennis He is our new BACK-END professional. Ritchie will install DOCKER for him automatically.  Test with input flags  ~ rit get tools --rit_name=\"Dennis\" --rit_profile=\"BACK-END\" --rit_tool=\"DOCKER\" Welcome to Dennis He is our new BACK-END professional. Ritchie will install DOCKER for him automatically.  If you want to test your formula more, see a suggestion below:\n Install the selected tool according to the computer OS.   Next step 👉 If you’ve completed the second tutorial, go to the fourth How to group formulas.\n","excerpt":"Here, the idea is to create a formula on Ritchie that will return the …","language":"content/en","ref":"/tutorials/conditional-inputs/","title":"How to use conditional inputs"},{"body":"Neste tutorial, a ideia é criar uma fórmula que irá agrupar uma outra fórmula dentro dela.\n Para mais informações sobre agrupamento de fórmulas, veja a seção de encapsular fórmulas.\n Vamos agrupar pelo menos duas fórmulas:\n rit math sum numbers (Nível 1). rit math multiply numbers (TODO).  Sugestão de comando: rit math calculate  Parâmetros de entrada Essa fórmula deverá conter (pelo menos) três parâmetros de entrada. Veja como abaixo:\n Number one (RIT_NUMBER_ONE). Number two (RIT_NUMBER_TWO). Operation (RIT_OPERATION).  Como fazer isso? Essa parte é comum para todas as linguagens de programação.  Procure pelo arquivo config.json da sua fórmula e substitua o campo inputs pelo bloco abaixo:\n{ \"label\": \"Number one : \", \"name\": \"rit_number_one\", \"type\": \"text\" }, { \"label\": \"Number two : \", \"name\": \"rit_number_two\", \"type\": \"text\" }, { \"label\": \"Operation : \", \"name\": \"rit_operation\", \"type\": \"text\", \"items\": [ \"sum\", \"multiplication\" ] } ] Passo a Passo Siga os passos abaixo para criar a sua fórmula:\nPasso 1: Extrair os parâmetros de entrada Procure pelo arquivo main da sua fórmula e extraia os parâmetros de entrada antes de usá-los para chamar o método da fórmula. Veja abaixo alguns exemplos de códigos:\nPython Golang Shell import os from formula import formula number_one = int(os.environ.get(\"RIT_NUMBER_ONE\")) number_two = int(os.environ.get(\"RIT_NUMBER_TWO\")) operation = os.environ.get(\"RIT_OPERATION\") formula.run(number_one, number_two, operation)  package main import ( \"formula/pkg/formula\" \"os\" ) func main() { numberOne := os.Getenv(\"RIT_NUMBER_ONE\") numberTwo := os.Getenv(\"RIT_NUMBER_TWO\") operation := os.Getenv(\"RIT_OPERATION\") formula.Formula{ NumberOne: numberOne, NumberTwo: numberTwo, Operation: operation, }.Run() }  #!/bin/bash # shellcheck source=/dev/null . \"$(dirname \"$0\")\"/formula/formula.sh --source-only runFormula  Esse arquivo segue a nomenclatura main.* para a maioria das linguagens, exceto para o Node que chama index.js.  Passo 2: Implemente a operação da fórmula Execute a fórmula rit de acordo com a operação selecionada:\n multiply deve chamar a fórmula rit math multiply numbers; sum deve chamar a fórmula rit math sum numbers.  Procure pelo arquivo formula da sua fórmula e implemente o método realizando a operação da sua automação. Veja alguns exemplos de códigos:\nPython Golang Shell import os import json def run(number_one, number_two, operation): if operation == \"sum\": input_flag_cmd = f\"rit python math sum numbers --rit_number_one={number_one} --rit_number_two={number_two}\" elif operation == \"multiplication\": input_flag_cmd = f\"rit python math multiply numbers --rit_number_one={number_one} --rit_number_two={number_two}\" else: print(\"Unexpected operation\") os.system(f'{input_flag_cmd}')  package formula import ( \"fmt\" \"log\" \"os/exec\" ) type Formula struct { NumberOne string NumberTwo string Operation string } func (h Formula) Run() { cmdLine := exec.Command(\"\", \"\") switch h.Operation { case \"sum\": cmdLine = exec.Command( \"rit\", \"math\", \"sum\", \"numbers\", fmt.Sprintf(\"--rit_number_one=%s\", h.NumberOne), fmt.Sprintf(\"--rit_number_two=%s\", h.NumberTwo), ) case \"multiplication\": cmdLine = exec.Command( \"rit\", \"math\", \"multiply\", \"numbers\", fmt.Sprintf(\"--rit_number_one=%s\", h.NumberOne), fmt.Sprintf(\"--rit_number_two=%s\", h.NumberTwo), ) default: fmt.Print(\"Unexpected operation type:\", h.Operation) } out, err := cmdLine.CombinedOutput() if err != nil { log.Fatalf(\"cmd.Run() failed with %s\\n\", err) } fmt.Printf(string(out)) }  #!/bin/sh runFormula() { if [ \"sum\" = \"$RIT_OPERATION\" ]; then rit math sum numbers --rit_number_one=$RIT_NUMBER_ONE --rit_number_two=$RIT_NUMBER_TWO elif [ \"multiplication\" = \"$RIT_OPERATION\" ]; then rit math multiply numbers --rit_number_one=$RIT_NUMBER_ONE --rit_number_two=$RIT_NUMBER_TWO else echo \"Unexpected operation type: $RIT_OPERATION\" fi }  Dependendo da linguagem, pode ser necessário adicionar algumas dependências nos arquivos relacionados (pom.xml para Java, requirements.txt para Python, package.json para Node, go.mod para Golang, etc).  Passo 3: Teste a fórmula no terminal  Teste multiplicando  ~ rit math calculate ? Number one : 1 ? Number two : 2 ? Operation: multiplication The multiplication is 2  Teste somando  ~ ~ rit math calculate ? Number one : 1 ? Number two : 2 ? Operation: sum The sum is 3  Se você quiser testar mais sua fórmula, veja algumas sugestões abaixo:\n Adicione mais operações. Adicione a opção de informar qualquer quantidade de números como entradas.   ","excerpt":"Neste tutorial, a ideia é criar uma fórmula que irá agrupar uma outra …","language":"content/pt-br","ref":"/pt-br/tutoriais/agrupar-uma-formula/","title":"Como agrupar uma fórmula"},{"body":"Esse tutorial ajuda a você criar e configurar o workflow do Github actions para testar os outputs das suas fórmulas.\nRequisitos  Você precisa da fórmula rit math sum numbers no repositório do Github. Você precisa do diretório .github/workflows criado no repositório do Github.  Como fazer isso? Siga os próximos passos para testar uma fórmula:\nPasso 1: Crie um arquivo no diretório .github/workflows com o nome test-formula-sum-numbers.yml.\nPasso 2: Cole a implementação do yaml:\nyaml name: Formula Sum Numbers on: push: workflow_dispatch: jobs: formula-sum-numbers-job: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2.3.4 //requirement to the test-cli-commands-action - uses: actions/setup-node@v2 // requirement to the test-cli-commands-action with: node-version: '14' - name: Ritchie Installation run: curl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash - name: Ritchie Initialization run: echo '{\"addCommons\":false, \"sendMetrics\":false, \"runType\":\"local\"}' | rit init --stdin - name: Add current formula repository as workspace run: rit add workspace --name=\"current_repo\" --path=\"./\" - uses: GuillaumeFalourd/test-cli-commands-action@v1 with: command_line: rit math sum numbers —rit_number_one=1 —rit_number_two=2 contains: The sum is 3 expected_result: PASSED Passo 3: Depois de comitar e dar o push no seu código, acesse a aba Actions do repositório:\nVocê verá o workflow run sendo executado (ou o resultado da execução), veja abaixo:\nCada push no repositório irá agora iniciar esse workflow e você pode checar se a fórmula está comportando corretamente.\nVocê pode atualizar a implementação do workflow para ser iniciado apenas quando a raiz do diretório da fórmula estiver atualizado, ou testar mais cenários de acordo com os inputs da fórmula.\nPara mais informações sobre sintaxe de workflow, acesse a documentação do Github.\n","excerpt":"Esse tutorial ajuda a você criar e configurar o workflow do Github …","language":"content/pt-br","ref":"/pt-br/tutoriais/como-testar-formulas/","title":"Como testar outputs de formulas"},{"body":"In this tutorial, the idea is to create a formula to execute another formula inside it.\n See more information on how to run formula inside other on groups formulas section.\n Here, we will group at least two formulas:\n rit math sum numbers (level 1). rit math multiply numbers (TODO).  Command suggestion: rit math calculate  Inputs This formula must have (at least) three input parameters. See below:\n Number one (RIT_NUMBER_ONE). Number two (RIT_NUMBER_TWO). Operation (RIT_OPERATION).  How can you do that? This is the same for all programming languages.  Search for the config.json file of your formula and replace it the inputs field for the block below:\n{ \"label\": \"Number one : \", \"name\": \"rit_number_one\", \"type\": \"text\" }, { \"label\": \"Number two : \", \"name\": \"rit_number_two\", \"type\": \"text\" }, { \"label\": \"Operation : \", \"name\": \"rit_operation\", \"type\": \"text\", \"items\": [ \"sum\", \"multiplication\" ] } ] Step by step Follow the steps below to create your formula:\nStep 1: Extract all inputs parameters Search for the main file of tour formula and extract all the inputs before using them to call your formula’s method. See some code example below:\nPython Golang Shell import os from formula import formula number_one = int(os.environ.get(\"RIT_NUMBER_ONE\")) number_two = int(os.environ.get(\"RIT_NUMBER_TWO\")) operation = os.environ.get(\"RIT_OPERATION\") formula.run(number_one, number_two, operation)  package main import ( \"formula/pkg/formula\" \"os\" ) func main() { numberOne := os.Getenv(\"RIT_NUMBER_ONE\") numberTwo := os.Getenv(\"RIT_NUMBER_TWO\") operation := os.Getenv(\"RIT_OPERATION\") formula.Formula{ NumberOne: numberOne, NumberTwo: numberTwo, Operation: operation, }.Run() }  #!/bin/bash # shellcheck source=/dev/null . \"$(dirname \"$0\")\"/formula/formula.sh --source-only runFormula  This file follows the main.* nomenclature for most languages, except Node that it calls index.js.  Step 2: Implement the formula’s operation Run the rit formula according to the selected operation:\n multiply must call the rit math multiply numbers formula; sum must call the rit math sum numbers formula.  Search for the formula file of your formula and implement the method performing the operation of your automation. See some code examples:\nPython Golang Shell import os import json def run(number_one, number_two, operation): if operation == \"sum\": input_flag_cmd = f\"rit python math sum numbers --rit_number_one={number_one} --rit_number_two={number_two}\" elif operation == \"multiplication\": input_flag_cmd = f\"rit python math multiply numbers --rit_number_one={number_one} --rit_number_two={number_two}\" else: print(\"Unexpected operation\") os.system(f'{input_flag_cmd}')  package formula import ( \"fmt\" \"log\" \"os/exec\" ) type Formula struct { NumberOne string NumberTwo string Operation string } func (h Formula) Run() { cmdLine := exec.Command(\"\", \"\") switch h.Operation { case \"sum\": cmdLine = exec.Command( \"rit\", \"math\", \"sum\", \"numbers\", fmt.Sprintf(\"--rit_number_one=%s\", h.NumberOne), fmt.Sprintf(\"--rit_number_two=%s\", h.NumberTwo), ) case \"multiplication\": cmdLine = exec.Command( \"rit\", \"math\", \"multiply\", \"numbers\", fmt.Sprintf(\"--rit_number_one=%s\", h.NumberOne), fmt.Sprintf(\"--rit_number_two=%s\", h.NumberTwo), ) default: fmt.Print(\"Unexpected operation type:\", h.Operation) } out, err := cmdLine.CombinedOutput() if err != nil { log.Fatalf(\"cmd.Run() failed with %s\\n\", err) } fmt.Printf(string(out)) }  #!/bin/sh runFormula() { if [ \"sum\" = \"$RIT_OPERATION\" ]; then rit math sum numbers --rit_number_one=$RIT_NUMBER_ONE --rit_number_two=$RIT_NUMBER_TWO elif [ \"multiplication\" = \"$RIT_OPERATION\" ]; then rit math multiply numbers --rit_number_one=$RIT_NUMBER_ONE --rit_number_two=$RIT_NUMBER_TWO else echo \"Unexpected operation type: $RIT_OPERATION\" fi }  Depending on the language, it can be necessary add some dependencies in the related files (pom.xml for Java, requirements.txt for Python, package.json for Node, go.mod for Golang, etc).  Step 3: Test the formula on your terminal  Multiply test  ~ rit math calculate ? Number one : 1 ? Number two : 2 ? Operation: multiplication The multiplication is 2  Sum test  ~ ~ rit math calculate ? Number one : 1 ? Number two : 2 ? Operation: sum The sum is 3  If you want to test your formula more, see some suggestions below:\n Add more operations. Add the option to inform any quantity of numbers as inputs.   ","excerpt":"In this tutorial, the idea is to create a formula to execute another …","language":"content/en","ref":"/tutorials/group-a-formula/","title":"How to group a formula"},{"body":"This tutorial will help you to create and configure a Github Action workflow to test your formula outputs.\nRequirements  You need to have the rit math sum numbers formula on a Github repository. You need a .github/workflows directory created on the Github repository.  How can you do that? Follow the next steps to test a formula:\nStep 1: Create a file on the .github/workflows directory named test-formula-sum-numbers.yml.\nStep 2: Paste the following yaml implementation inside of it:\nyaml name: Formula Sum Numbers on: push: workflow_dispatch: jobs: formula-sum-numbers-job: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2.3.4 //requirement to the test-cli-commands-action - uses: actions/setup-node@v2 // requirement to the test-cli-commands-action with: node-version: '14' - name: Ritchie Installation run: curl -fsSL https://commons-repo.ritchiecli.io/install.sh | bash - name: Ritchie Initialization run: echo '{\"addCommons\":false, \"sendMetrics\":false, \"runType\":\"local\"}' | rit init --stdin - name: Add current formula repository as workspace run: rit add workspace --name=\"current_repo\" --path=\"./\" - uses: GuillaumeFalourd/test-cli-commands-action@v1 with: command_line: rit math sum numbers —rit_number_one=1 —rit_number_two=2 contains: The sum is 3 expected_result: PASSED Step 2: After you commit and push your code, go to the Actions tab’s repository:\nYou will see the workflow run being executed (or the result of its execution), see below:\nThat’s it, each push to the repository will now trigger this workflow and you can also check if the formula is behaving correctly.\nYou are able to update the workflow implementation to trigger only when the formula’s root directory is updated, or to test more scenarios according to the formula’s inputs.\nFor more information about workflow syntax, check out Github Documentation.\n","excerpt":"This tutorial will help you to create and configure a Github Action …","language":"content/en","ref":"/tutorials/how-to-test-formulas/","title":"How to test formulas outputs"},{"body":" Commands Configuration commands    Commands Operation     rit init initialize Ritchie before use   rit upgrade upgrade to the last Ritchie stable version   rit tutorial enable or disable the tutorial   rit -v return Ritchie currently installed version    Repo commands    Command Operation     rit add repo add a new repository (to access repository formulas with Ritchie)   rit list repo show a list with all your available repositories   rit update repo update all repositories (to access new formulas from those repositories with Ritchie)   rit set repo-priority set a repository priority   rit delete repo delete a repository (to remove access to the repository formulas with Ritchie)    Formula commands    Command Operation     rit create formula create a new formula from scratch (as well as a new local repository if necessary)   rit build formula build a formula locally for test   rit build formula –watch build a formula monitoring the code to update real time changes   rit rename formula rename a local formula   rit list formula list all available formulas from specific/all repositories    The rit build formula command was deprecated from Ritchie’s version 2.5.0.  Autocomplete commands    Commands Operation     rit completion zsh add autocomplete via zsh   rit completion bash add autocomplete via bash   rit completion fish add autocomplete via fish   rit completion powershell add autocomplete via powershell    Env commands    Commands Operation     rit set env set a new environment   rit show env show the current environment used   rit delete env delete a environment    Credential commands    Commands Operation     rit set credential set new credentials for the context   rit list credential list all credential names and fields    Workspace commands    Commands Operation     rit list workspace list all formula’s workspaces   rit add workspace add a new workspace   rit delete workspace delete a specific formula’s workspace   rit update workspace update a specific formula’s workspace (to access new formulas from this workspace with Ritchie)    Flags Main flags    Flags Operation     --default attribute the default values configured on the formula.   --docker run a formula using Docker   --help returns a list of executable available commands and flags for the user   --local run a formula locally   --verbose run a formula without log details    ","excerpt":" Commands Configuration commands    Commands Operation     rit init …","language":"content/en","ref":"/reference/list-of-commands-and-flags/","title":"List of commands and flags"},{"body":" Comandos Comandos de Configuração    Comandos Operação     rit init inicia o Ritchie antes de usar   rit upgrade atualiza o Ritchie para a última versão estável   rit tutorial habilita ou desabilita o tutorial   rit -v retorna qual a versão atual instalada do Ritchie    Comandos de Repositórios    Comandos Operação     rit add repo adiciona um novo repositório (para ter acesso as fórmulas desse repositório com Ritchie)   rit list repo lista todos os repositórios disponíveis   rit update repo atualiza todos os repositórios (para acessar novas fórmulas desses repositórios com o Ritchie)   rit set repo-priority configura a prioridade do repositório   rit delete repo apaga um repositório (remove o acesso ao repositório de fórmulas com o Ritchie)    Comandos de Fórmulas    Command Operation     rit create formula cria uma nova fórmula do zero (como também um novo repositório local, se necessário)   rit build formula compila uma fórmula localmente para teste   rit build formula –watch compila uma fórmula para teste, monitorando atualizações do código no tempo real   rit rename formula renomeia uma fórmula local   rit list formula lista todas as fórmulas disponíveis em um/todos repositórios    O comando rit build formula foi depreciado a partir da versão 2.5.0 do Ritchie.  Comandos de Autocomplete    Comandos Operação     rit completion zsh adiciona o autocomplete via zsh   rit completion bash adiciona o autocomplete via bash   rit completion fish adiciona o autocomplete via fish   rit completion powershell adiciona o autocomplete via powershell    Comandos de Ambiente    Comandos Operação     rit set env configura um novo ambiente   rit show env mostra o atual ambiente que foi usado   rit delete env apaga um ambiente    Comandos de Credenciais    Comandos Operação     rit set credential configura credenciais na sessão   rit list credential lista todas os nomes de credenciais e os campos   rit delete credential permite apagar suas credenciais    Comandos de Workspaces    Comandos Operações     rit list workspace lista todas as fórmulas do workspace   rit add workspace adiciona um novo workspace   rit delete workspace apaga um workspace   rit update workspace atualiza um workspace (para acessar novas fórmulas desse workspace com o Ritchie)    Flags Principais flags    Flags Operações     --default atribui os valores default configurados na fórmula   --docker executa a fórmula usando Docker   --help retorna a lista dos comandos executáveis que estão disponíveis e flags para o usuário   --local executa a fórmula localmente   --verbose executa a fórmula sem detalhes dos logs    ","excerpt":" Comandos Comandos de Configuração    Comandos Operação     rit init …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/lista-de-comandos-e-flags/","title":"Lista de comandos e flags"},{"body":"","excerpt":"","language":"content/en","ref":"/reference/","title":"Reference"},{"body":"","excerpt":"","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/","title":"Referência"},{"body":"Ritchie 1.0 e Ritchie 2.0 Diferenças entre as versões 1.0 e 2.0\n As versões Single e Team foram depreciadas. Veja a dica abaixo se você precisar usá-las. A árvore de comando será gerada dinamicamente a partir dos repositórios adicionados. Ou seja, não será mais necessário alterar o arquivo tree.json manualmente. Não terá mais armazenamento de fórmulas na nuvem. O usuário poderá importar os repositórios do Github ou do Gitlab . (rit add repo) Suporte para autocomplete para 2 novos Shells: Fish e Powershell. (rit completion fish | rit completion powershell) Suporte para executar fórmulas em container. (--docker flag) Suporte para fazer “build” de fórmulas no Windows. Tutorial incorporado no CLI. Melhorias estruturais.  A versão 2.0 não suporta o Vault para compartilhar credenciais. Logo, caso você queira continuar usando essa funcionalidade, precisará ficar na versão 1.0.  Como migrar fórmulas da versão 1.0 para a 2.0 Contexto Se você usa a versão 1.0 do Ritchie e deseja migrar para a versão 2.0, será necessário atualizar a estrutura dos seus repositórios de fórmulas para ser compatível com a nova versão.\nComo migrar? Abaixo, segue um passo a passo de como você pode fazer isso:\nPasso 1: Crie um novo repositório do zero usando o comando rit create formula\n Adicionando as mesmas fórmulas usadas no repositório antigo, no repositório novo.  Passo 2: Exporte a implementação das fórmula do repositório antigo para o novo.\n A estrutura continua usando os mesmos arquivos: config.json , main.*, formula.*. Copie o código da estrutura antiga para a nova, respeitando o novo layout.  Passo 3: Publique o novo repositório de fórmulas no github ou no gitlab (pode ser público ou privado).\nPasso 4: Gere uma release desse repositório de fórmulas.\nPasso 5: Adicione o repositório de fórmulas no Ritchie usando o comando rit add repo.\nPasso 6: Compartilhe seu repositório de fórmula com sua equipe, seus colegas ou a comunidade.\nEm caso de dúvida, entre em contato com a nossa equipe no e-mail ritchie@zup.com.br ou abrindo uma issue no repositório ritchie-formulas.  ","excerpt":"Ritchie 1.0 e Ritchie 2.0 Diferenças entre as versões 1.0 e 2.0\n As …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/migracao/","title":"Migrando da v1 para a v2"},{"body":"Ritchie 1.0 and Ritchie 2.0 Differences between version 1.0 and 2.0\n Ritchie versions Single and Team are deprecated. Check the observation below if you still want to use the previous version. The command tree will be dynamically generated on the added repositories. So, it won’t be necessary to edit formula’s repositories tree.json files anymore. There isn’t a cloud storage anymore. The user can import formulas repositories from Github or Gitlab. (rit add repo) __ Autocomplete support for 2 new shells: Fish and Powershell. (rit completion fish | rit completion powershell) Support to run formula in a container. (--docker flag) Support to build formulas on Windows OS. New tutorial to the CLI. Structural upgrades.  Version 2.0 doesn’t support Vault to share credentials. Therefore, if you want to keep using those features, you have to stay on the 1.0 version.  How can you migrate formulas from V1.0 to V2.0? Context If you use Ritchie 1.0 version and want to upgrade to the 2.0 one, you have to update your formula’s repository structure to be compatible to the pattern used on the new version.\nHow to migrate? Step 1: Create new formula repo from scratch using the rit create formula command.\n Adding the same formulas paths used on the older repository to the new one.  Step 2: Export your formulas implementations from the older repository to the new one.\n The structure still uses the same files: config.json , main.*, formula.*. Copy these files codes from the old structure to the new one, respecting the new layout.  Step 3: Publish the new formula repository on github or gitlab (also, it can public or private).\nStep 4: Generate a release of the formula repository.\nStep 5: Add the formula repository on Ritchie using the rit add repo command.\nStep 6: Share your formula’s repository with your team, colleagues or the community.\nIf you have any question, feel free to contact our team at ritchie@zup.com.br or by opening an issue on the ritchie-formulas repository.  ","excerpt":"Ritchie 1.0 and Ritchie 2.0 Differences between version 1.0 and 2.0 …","language":"content/en","ref":"/reference/version-migration/","title":"Version Migration"},{"body":"Recursos do Ritchie  Acompanhe o roadmap do Ritchie no Github. Veja o canal do Ritchie no Youtube.  ","excerpt":"Recursos do Ritchie  Acompanhe o roadmap do Ritchie no Github. Veja o …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/resources/","title":"Recursos"},{"body":"Ritchie’s resources  Ritchie’s roadmap on Github. Check out Ritchie’s Youtube channel.  The Youtube channel, for now, has only Portuguese content.  ","excerpt":"Ritchie’s resources  Ritchie’s roadmap on Github. Check out Ritchie’s …","language":"content/en","ref":"/reference/resources/","title":"Resources"},{"body":" How was Ritchie created? Ritchie’s goal is to improve the developer’s experience, giving them more autonomy to automate and simplify the execution of commands used in the process of creating and developing digital products.\nThe name is a tribute to Dennis Ritchie, one of the Unix (predecessor of Linux) creators and also of the C language, which allowed the creation of the digital world as we know it today.\nDespite a great number of multidisciplinary teams in the market, there is a challenge to reduce the dependence developers have on inputs that come from infrastructure and operations teams. DevOps helped remedy the situation, but it did not eliminate the dependency between areas.\nRitchie’s team bring a tool to the community that promotes a NoOps movement, a solution that automates repetitive operations and streamlines processes (also known as toil) that are often hampered in the infrastructure.\nThis will give developers the ability to perform operations that were exclusively the infrastructure’s domain.\n In that way, professionals - on all fronts - gain time to work on more complex and relevant tasks to generate value for their projects.\nWhat makes Ritchie different? As a CLI tool, Ritchie seeks to improve the operational developers' experience and brings beneficial such as:\n Simplify repetitive and easy-to-execute tasks Reduce the rework Promote more time for the development team to focus on their deliveries.  So, instead of writing down on the command lines which parameters and/or arguments the user needs to inform, we do the opposite:\n Ritchie presents the available options and goes, line by line, asking for the information needed for the command to work, in an interactive way.  In the example below, you will see the execution of a scaffold command with the coffee formula. When the user signals which formula he wants to use, the system automatically passes, line by line, asking which specific parameters must be considered to perform the desired action.\n","excerpt":" How was Ritchie created? Ritchie’s goal is to improve the developer’s …","language":"content/en","ref":"/reference/about-ritchie/","title":"About Ritchie"},{"body":" Como o Ritchie foi criado? O produto foi criado com objetivo de melhorar a experiência dos desenvolvedores, trazendo mais autonomia para automatizar e simplificar a execução de comandos usados no processo de criação e desenvolvimento de produtos digitais.\nSeu nome é uma homenagem a Dennis Ritchie, um dos criadores do Unix (predecessor do Linux) e também da linguagem C, que permitiu a criação do mundo digital como o conhecemos hoje.\nApesar de existirem equipes mais multidisciplinares no mercado, um desafio ainda muito grande está em diminuir a dependência que desenvolvedores têm de insumos vindo dos times de infraestrutura e operações. O DevOps contribuiu muito para sanar esse gargalo, mas não eliminou completamente a dependência entre áreas.\nPensando nisso, trazemos uma ferramenta para a comunidade que promove um movimento NoOps, ou seja, uma solução que automatize operações repetitivas (também conhecidas como toil) e agilize processos muitas vezes travados na infraestrutura.\nIsso dará aos desenvolvedores a possibilidade de executar operações que eram exclusivamente de domínio da infraestrutura.\n Dessa forma, os profissionais - de todas as frentes - ganham tempo para atuar em tarefas mais complexas e relevantes para gerar valor ao seu projeto.\nQual diferencial do Ritchie? Por ser uma ferramenta de CLI, o Ritchie busca melhorar a experiência operacional dos desenvolvedores e traz benefícios como:\n Simplificar tarefas repetitivas e de fácil execução Reduzir o retrabalho Promover mais tempo para que o time de desenvolvimento foque em suas entregas.  Ao invés de sinalizar nas linhas de comando quais parâmetros e/ou argumentos o usuário precisa informar, fazemos o contrário: o Ritchie apresenta as opções disponíveis e vai, linha a linha, perguntando as informações necessárias para o comando funcionar, de forma interativa.\nNo exemplo abaixo, você pode ver a execução de um comando scaffold com a fórmula coffee.\nQuando o usuário sinaliza qual a fórmula quer utilizar, o sistema automaticamente passa, linha a linha, a perguntar quais parâmetros específicos devem ser considerados para executar a ação desejada.\n","excerpt":" Como o Ritchie foi criado? O produto foi criado com objetivo de …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/sobre-ritchie/","title":"Sobre Ritchie"},{"body":" The main concepts on Ritchie are\n CLI Command Tree Credential Environment Formula JSON Repository Standard Streams  CLI It is a command line interface, which is a program that processes commands in a software or any computing program only through text.\nCommand Tree Commands used in Ritchie are grouped according to a “tree”. It is important to know this concept in order to actually understand the structure of the product.  In the case of Ritchie, the Cobra (a Golang library) pattern was followed using the following logic of building core commands:\nRIT + VERB + NOUN\nTo allow more options and freedom for users, it is also allowed to follow the pattern below in the construction of formula commands:\nRIT + GROUP + VERB + NOUN\nThe app name is Ritchie, so we use the name rit to start our command tree.\nThe rit command is therefore our parent command, or root. It is not executable, but has been configured to return the helper command.\nIt is necessary to use executable sub-commands (which are child commands, or branches, of the rit command) in order to start any process.\n The executable commands in Ritchie are the commands located at the last level of the tree.\nFor example, in the image above:\n The rit set context command is executable, as it is at the last level of the tree. The rit kafka create command is not executable as there is an executable topic subcommand, at the last level of the tree.  This command tree concept is the core of Ritchie’s structure.\nAll commands and sub-commands are mapped in a tree dynamically created according to the repositories the user added locally on his computer by using the rit add repo command.  Credential It is the reusable input parameters you can use in Ritchie (for example: access data for any tool or api).\nEnvironment On Ritchie, each environment will have its own credentials, it may be necessary to execute specific formulas through the CLI.\nFor example: it’s possible to create a professional and a personal environments (or prod and staging) with different credentials, and switch from an environment to another according to the necessity.\nFormula In Ritchie’s context, the formulas are scripts executed through a command line. The user can execute it locally or through Docker with the necessary dependencies.\nRun formulas Depending on the formula, the user might need to inform input parameters.\nThose input parameters can be informed in different ways:\n After running the command on the terminal (via prompt). When typing the command on the terminal (via stdin or input flags). During the execution of the formula (if coded using prompt).  JSON JavaScript Object Notation (JSON), it is a standard text based format used to structure data created with JavaScript programming language.\nRepository A storage place you can organize features, commands or any files and/or files necessary to use a tool. On Ritchie, there are three repositories created to manage formulas, the server and contributions we receive.\n ritchie-cli. ritchie-formulas.  Standard Streams It is a communication channel that allows input and output interconnection between a computer program and its environment.\nOn Ritchie, the standard input (stdin) is used to execute commands automatically.\n","excerpt":" The main concepts on Ritchie are\n CLI Command Tree Credential …","language":"content/en","ref":"/reference/glossary/","title":"Glossary"},{"body":" Os principais conceitos que fazem parte do Ritchie são:\n Árvore de Comando CLI Credencial Environment (Ambiente) Fórmula JSON Repositório Standard Streams  Árvore de comando No Ritchie, os comandos são agrupados em “árvores”. É importante conhecer esse conceito para entender a estrutura do projeto.  O Ritchie segue o padrão do Cobra (uma biblioteca da linguagem Golang) para a lógica dos comandos core:\nRIT + VERBO + SUBSTANTIVO\nPara permitir mais opções e liberdade aos usuários, também é possível seguir o padrão abaixo na construção de comandos das fórmulas:\nRIT + GRUPO + VERBO + SUBSTANTIVO\nUsamos o prefixo rit para iniciar nossa árvore de comandos.\nO comando rit é nosso comando pai, ou raiz. Ele não é executável, mas foi configurado para retornar o comando de ajuda.\nÉ necessário utilizar sub-comandos (que são comandos filhos, ou ramos, do comando rit) executáveis para conseguir iniciar algum processo.\n Os comandos executáveis no Ritchie são os comandos localizados no último nível da árvore.\nPor exemplo, na imagem acima temos:\n O comando rit set context é executável, pois está no último nível da árvore. O comando rit kafka create não é executável, pois ele tem um sub-comando topic executável no último nível da árvore.  Esse conceito de árvore de comandos é o núcleo da estrutura do Ritchie.\nEssa árvore é gerada dinamicamente pelo CLI baseado nos repositório de fórmulas adicionados localmente pelo comando**rit add repo**.  CLI É a interface de linha de comando, o programa responsável por processar comandos de um software ou qualquer programa computacional por meio de texto.\nCredencial É um parâmetro de entrada reutilizável que você pode utilizar no Ritchie (exemplo: dados de acessos para alguma ferramenta ou API).\nEnvironment (Ambiente) No Ritchie, cada ambiente (environment) possui suas próprias credenciais, que podem ser necessárias para executar fórmulas específicas através do CLI.\nPor exemplo: é possível criar ambientes pessoal e profissional (ou prof e staging) com diferentes credenciais e trocar de um ambiente para o outro de acordo com suas necessidades.\nFórmulas No contexto do Ritchie, as fórmulas são scripts que podem ser executados por linha de comando. O usuário pode executar as fórmulas localmente ou por meio do Docker com todas as dependências necessárias.\nExecução de fórmulas Dependendo da fórmula, o usuário pode precisar informar alguns parâmetros de entrada.\nEsses parâmetros de entrada podem ser informados de diversas maneiras:\n Depois de executar o comando no terminal (via prompt). Quando digitar a linha de comando no terminal (via stdin ou input flags). Durante a execução da fórmula (se o código usou o prompt).  JSON JavaScript Object Notation (JSON), é um formato padrão de texto usado para estruturar dados criados com linguagem de programação JavaScript.\nRepositório Um local de armazenamento em que você pode organizar features, comandos ou quaisquer arquivos necessários para se usar na ferramenta. No Ritchie, existem três repositórios criados para gerenciar fórmulas, servidor e contribuições:\n ritchie-cli. ritchie-formulas.  Standard Streams O canal de comunicação que permite a interconexão de input e output entre um programa computacional e o seu ambiente.\nNo Ritchie, o standard input (stdin) é usado para executar comandos automaticamente.\n","excerpt":" Os principais conceitos que fazem parte do Ritchie são:\n Árvore de …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/gloss%C3%A1rio/","title":"Glossário"},{"body":" About Ritchie What is Ritchie? Ritchie is an open source framework that creates and tweaks a CLI for your team. It allows you to easily create, build and share formulas. For more information, check out about Ritchie section.\nWhat does Ritchie do? Ritchie creates automation commands to improve the operational developers' experience and brings beneficial such as:\n Simplify repetitive and easy-to-execute tasks Reduce the rework Promote more time for the development team to focus on their deliveries.  Installation and Use How to install Ritchie? You can follow the installation step by step according do the operational system you’re using. For more information, check out the installation section.\nHow to create a new formula on Ritchie? Using the command rit create formula , you can create formulas using any programming language. Check out more in create a formula section.\nHow to create formulas on an existing repository? Follow the next steps:\n Clone the repo; Add the repo with rit add workspace command; Add the new formula with rit create formula command and implement it.  How to run formulas? You can execute your formulas locally or through Docker. For more information, check out how to run a formula section.\nHow to build formulas on Ritchie? When you run a formula, a build is automatically made, you don’t need a command to do that.\nHow to update a formula from a repository? Follow the next steps:\n Locally clone the repo; Add the repo with the rit add workspace command; Now, update the workspace.  How to execute a formula from a repository? Use rit add repo  command to add the repository.\nHow to publish formulas on Ritchie? You can publish a formula by creating a Github’s, Gitlab’s or Bitbucket’s repository and adding a release version of this formula. For more information, check out how to publish a formula section.\nCommunity How to submit my formula on community’s repo? You just have to open a pull request on ritchie-formula’s repository  with your formula suggestion.\nHow to contribute? You can contribute with improvements, suggestions or reporting bugs onritchie-cli’s repository. That’s the process you should follow:\n Fork the repository. Create a branch: git checkout -b \u003cbranch_name\u003e. Implement your idea. Commit your implementation: git commit -m '\u003ccommit_message\u003e'. Push your branch: git push origin \u003cproject_name\u003e/\u003clocation\u003e. Open a pull request on the main branch for analysis.  ","excerpt":" About Ritchie What is Ritchie? Ritchie is an open source framework …","language":"content/en","ref":"/reference/faq/","title":"FAQ"},{"body":" Sobre o projeto O que é Ritchie? O Ritchie é um framework open source que cria e ajusta o CLI para seu time. Ele permite que você crie, faça o build e compartilhe fórmulas facilmente. Para mais informações, veja a seção sobre o produto.\nO que o Ritchie faz? O Ritchie cria automações para melhorar a experiência operacional dos desenvolvedores e traz benefícios como:\n Simplificar tarefas repetitivas e de fácil execução. Reduzir o retrabalho. Promover mais tempo para que o time de desenvolvimento foque em suas entregas.  Instalação e Uso Como instalar p Ritchie? Você pode seguir o passo a passo da instalação de acordo com o seu sistema operacional. Para mais informações, veja a seção de instalação..\nComo criar uma nova fórmula no Ritchie? Usando o comando rit create formula, você pode criar fórmulas usando qualquer linguagem de programação. Para mais informações, veja a seção Como criar fórmulas. .\nComo criar fórmulas em um repositório existente? Siga os passos abaixo:\n Clone o repo; Adicione o repo com o comando rit add workspace; Adicione e implemente a nova fórmula com o comando rit create formula.  Como executar fórmulas? Você pode executar suas fórmulas de maneira local ou por meio do Docker. Para mais informações, veja a seção como executar fórmulas. .\nComo fazer o “build” de fórmulas no Ritchie? Ao executar uma fórmula, o ‘build’ é feito automaticamente, não é necessário nenhum comando para isso.\nComo atualizar uma fórmula de um repositório? Siga os passos abaixo:\n Clone o repositório localmente; Adicione o repo com o comando rit add workspace Depois disso, atualize o workspace.  Como executar uma fórmula de um repositório? Use o comando rit add repo  para adicionar a fórmula ao repositório.\nComo publicar fórmulas no Ritchie? Você pode publicar uma fórmula criando um repositório no Github, Gitlab ou Bitbucket e adicionando uma release da sua fórmula. Para mais informações, veja a seção como publicar uma fórmula.\nComunidade Como submeter minha fórmula no repositório da comunidade? Você precisa abrir um pull request no repositório ritchie-formula  com sua sugestão de fórmula.\nComo contribuir? Você pode contribuir com melhorias, sugestões ou reportes de bugs no repositório ritchie-cli.. O processo que você deve seguir é:\n Faça o fork do repositório. Crie uma branch: git checkout -b \u003cbranch_name\u003e. Implemente sua ideia. Commit sua implementação: git commit -m '\u003ccommit_message\u003e'. Faça o push da sua branch: git push origin \u003cproject_name\u003e/\u003clocation\u003e Abra o pull request na branch main para analise da time do Ritchie.  ","excerpt":" Sobre o projeto O que é Ritchie? O Ritchie é um framework open source …","language":"content/pt-br","ref":"/pt-br/refer%C3%AAncia/faq/","title":"FAQ"},{"body":"Comunidade Como submeter minha fórmula no repositório da comunidade? Você só precisa abrir um pull request no repositório ritchie-formula com a sua sugestão de fórmula.\nComo contribuir? Você pode contribuir com melhorias, sugestões ou reportar bugs no repositório ritchie-cli..\nSiga os passos abaixo para iniciar sua contribuição:\nPasso 1. Faça um fork do repositório relacionado; Passo 2. Crie a branch: git checkout -b \u003cbranch_name\u003e; Passo 3. Codifique sua ideia; Passo 4. Faça o commit: -s -S . \"git commit -s -S -m '\u003ccommit_message\u003e'\"; Passo 5. Publique a sua branch: git push origin \u003cproject_name\u003e/\u003clocation\u003e; Passo 6. Faça um pull request para a branch main para avaliação do time.\nPara mais informações, acesse o Guia de Contribuição.\n","excerpt":"Comunidade Como submeter minha fórmula no repositório da comunidade? …","language":"content/pt-br","ref":"/pt-br/contribua/","title":"Contribua"},{"body":"Community How to submit my formula on community’s repo? You just have to open a pull request on ritchie-formula’s repository  with your formula suggestion.\nHow to contribute? You can contribute with improvements, suggestions or reporting bugs on ritchie-cli’s repository. .\nFollow the steps below to contribute:\nStep 1. Fork the repository Step 2. Create a branch: git checkout -b \u003cbranch_name\u003e Step 3. Implement your idea Step 4. Commit your implementation: git commit -s -S . \"git commit -s -S -m '\u003ccommit_message\u003e'\" Step 5. Push your branch: git push origin \u003cproject_name\u003e/\u003clocation\u003e Step 6. Open a pull request on the main branch for the team’s analysis.\nFor more information, access the Contributing Guide.\n","excerpt":"Community How to submit my formula on community’s repo? You just have …","language":"content/en","ref":"/contribute/","title":"Contribute"}]